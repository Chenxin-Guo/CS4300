{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "afedbf022619ab58f15da0983c99d4fb",
     "grade": false,
     "grade_id": "cell-05fb407e20c068e6",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "# Assignment 3: \"Search your transcripts. You will know it to be true.\"\n",
    "\n",
    "## Â© Cristian Danescu-Niculescu-Mizil 2020\n",
    "\n",
    "## CS/INFO 4300 Language and Information\n",
    "\n",
    "### Due by midnight on Wednesday February 12th\n",
    "\n",
    "\n",
    "This is an **individual** assignment.\n",
    "\n",
    "If you use any outside sources (e.g. research papers, StackOverflow) please list your sources.\n",
    "\n",
    "In this assignment we will explore the tradeoffs of information retrieval systems by finding newspaper quotes from \"Keeping Up With The Kardashians\". In this part you will experiment with variations of edit distance. In the next assignment we will contrast this with other similarity measures.\n",
    "\n",
    "\n",
    "**Guidelines**\n",
    "\n",
    "All cells that contain the blocks that read `# YOUR CODE HERE` are editable and are to be completed to ensure you pass the test-cases. Make sure to write your code where indicated.\n",
    "\n",
    "All cells that read `YOUR ANSWER HERE` are free-response cells that are editable and are to be completed.\n",
    "\n",
    "You may use any number of notebook cells to explore the data and test out your functions, although you will only be graded on the solution itself.\n",
    "\n",
    "You are unable to modify the read-only cells.\n",
    "\n",
    "You should also use Markdown cells to explain your code and discuss your results when necessary.\n",
    "Instructions can be found [here](http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Working%20With%20Markdown%20Cells.html).\n",
    "\n",
    "All floating point values should be printed with **2 decimal places** precision. You can do so using the built-in round function.\n",
    "\n",
    "**Grading**\n",
    "\n",
    "For code-completion questions you will be graded on passing the public test cases we have included, as well as any hidden test cases that we have supplemented to ensure that your logic is correct.\n",
    "\n",
    "For free-response questions you will be manually graded on the quality of your answer.\n",
    "\n",
    "**Learning Objectives**\n",
    "- Practicing our understanding of edit distance\n",
    "- Implementing edit distance\n",
    "- Building intuition about different cost schemas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d59a10b6d378b66d255aa3a261bcf3ea",
     "grade": false,
     "grade_id": "cell-f1dd9a71b4c17f87",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "from IPython.display import HTML"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Motivation\n",
    "\n",
    "The tabloids have been going crazy over our stars! The press took some  quotes from the show, including:\n",
    "       \n",
    " - *\"It's like a bunch of people running around talking about nothing.\"*\n",
    " - *\"Never say to a famous person that this possible endorsment would bring 'er to the spot light.\"*\n",
    " - *\"Your yapping is making my head ache!\"*\n",
    " - *\"I'm going to Maryland, did I tell you?\"*\n",
    " \n",
    "We need to find out who said each of these, and in which episode. But since we're information scientists, that's not enough. We want to build an efficient search engine for retrieving where such quotes come from in the future.\n",
    "\n",
    "What makes this difficult is that journalists often modify the quotes, so exact matching will not always work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "88a02191a9856c6d5cde9a3bd1d15535",
     "grade": false,
     "grade_id": "cell-aa241541357eb588",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "queries = [u\"It's like a bunch of people running around talking about nothing.\",\n",
    "           u\"Never say to a famous person that this possible endorsment would bring 'er to the spot light.\",\n",
    "           u\"She just told me to get in the car and buckle my seatbelt.\",\n",
    "           u\"I'm going to Maryland, did I tell you?\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "7af4161c06c03fe0dff5403c138148f9",
     "grade": false,
     "grade_id": "cell-0f7ae320331de933",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Load the data\n",
    "\n",
    "Load the transcripts provided in the `kardashian-transcripts.json` file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f1a27f4532095afde9f67e51778c1a1b",
     "grade": false,
     "grade_id": "cell-998dffdd45ebf2d4",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "import json\n",
    "with open(\"kardashian-transcripts.json\", \"r\") as f:\n",
    "    transcripts = json.load(f)\n",
    "\n",
    "#we will analyze only a subset of the transcripts to reduce computation time\n",
    "transcripts = transcripts[470:500]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "60183ecce7ce06c1165c9d6a318c97a7",
     "grade": false,
     "grade_id": "cell-677d188e01c99c05",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Reorganize the data\n",
    "\n",
    "For this assignment, we'll consider documents to be individual message lines. The provided transcripts are grouped differently. We reorganize the data as a list of messages, where the messages are dictionary structures as provided."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d7f4c7b02fcff086fc53fa5edd79b1f4",
     "grade": false,
     "grade_id": "cell-e1781547f7fd821f",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "flat_msgs = [m for transcript in transcripts for m in transcript]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'episode_title': 'Keeping Up With the Kardashians - Delivering Baby Mason',\n",
       " 'speaker': 'CRANE',\n",
       " 'text': 'Wow! Who knew?',\n",
       " 'timestamp': '00:07:40',\n",
       " 'toks': ['wow', '!', 'who', 'knew', '?'],\n",
       " 'transcript_id': 'kardashians2/209686'}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flat_msgs[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "9f942505afe216be3d123e33f52ae9e9",
     "grade": false,
     "grade_id": "cell-2eacb96f7904e12e",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "# Searching the collection\n",
    "\n",
    "### Question 1a: Verbatim Search (Code Completion)\n",
    "\n",
    "The first and easiest thing we might try to do is to directly compare the newspaper quote to the transcript strings.  If the press just copy-pasted from the transcript website, this might work. We want to find all messages that include a given quote exactly.\n",
    "\n",
    "To do this, write a function `verbatim_search` that looks for exact matches of a query in each message.\n",
    "\n",
    "Hint: Use the `in` keyword. Ex. `'efg' in 'cdefgh'` evaluates to `True`.\n",
    "\n",
    "Note: Because this is a verbatim search, this method should be case-sensitive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4a573b3c1f7399e5a0ad714b32e0848c",
     "grade": false,
     "grade_id": "verbatim_search",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def verbatim_search(query, msgs):\n",
    "    \"\"\" Verbatim search\n",
    "    \n",
    "    Arguments\n",
    "    =========\n",
    "    \n",
    "    query: string,\n",
    "        The query we are looking for.\n",
    "        \n",
    "    msgs: list of dicts,\n",
    "        Each message in this list has a 'text' field with\n",
    "        the raw document.\n",
    "    \n",
    "    Returns\n",
    "    =======\n",
    "    result: list of messages\n",
    "        All messages that exactly contain the query string.\n",
    "    \n",
    "    \"\"\"\n",
    "    # YOUR CODE HERE\n",
    "    mess= []\n",
    "    for epi in msgs:\n",
    "        if query in epi['text']:\n",
    "            mess.append(epi)\n",
    "            \n",
    "    return mess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "16239ad19a7bd7ebeea62b5df09f33b1",
     "grade": true,
     "grade_id": "verbatim_search_test",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[QUERY 0] :  It's like a bunch of people running around talking about nothing.\n",
      "===\n",
      "RESULT: BRUCE: It's like a bunch of people running around talking about nothing.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "\n",
      "\n",
      "[QUERY 1] :  Never say to a famous person that this possible endorsment would bring 'er to the spot light.\n",
      "===\n",
      "NO RESULTS\n",
      "\n",
      "[QUERY 2] :  She just told me to get in the car and buckle my seatbelt.\n",
      "===\n",
      "NO RESULTS\n",
      "\n",
      "[QUERY 3] :  I'm going to Maryland, did I tell you?\n",
      "===\n",
      "NO RESULTS\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# This is an autograder test. Here we can test the function you just wrote above.\n",
    "\"\"\"Check that tokenize returns the correct output\"\"\"\n",
    "assert len(verbatim_search(queries[0], flat_msgs)) == 1\n",
    "assert len(verbatim_search(queries[2], flat_msgs)) == 0\n",
    "\n",
    "# This will nicely output the results\n",
    "for no, query in enumerate(queries):\n",
    "    print(\"[QUERY {}] : \".format(no), query)\n",
    "    print(\"===\")\n",
    "    results = verbatim_search(query, flat_msgs)\n",
    "    for msg in results:\n",
    "        print(\"RESULT: {}: {}\\n\\t({})\\n\".format(\n",
    "                                        msg['speaker'],\n",
    "                                        msg['text'],\n",
    "                                        msg['episode_title']))\n",
    "    if not len(results):\n",
    "        print(\"NO RESULTS\")\n",
    "    print()\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "694241a63defae3c83e43cce0fe659a3",
     "grade": false,
     "grade_id": "cell-a61ae748913f89cc",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "\n",
    "### Question 1b: Verbatim Search (Free Response)\n",
    "\n",
    "Would you want to use a verbatim search for extracting the closest quotes from the transcripts? Why or why not?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "54397978957bda7d2f703ebc6f735964",
     "grade": true,
     "grade_id": "cell-1bd04b461d1aa9ba",
     "locked": false,
     "points": 5,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "YOUR ANSWER HERE\n",
    "\n",
    "No, i won't. Because verbatim search is accurate search, meaning that we can only find a message iff the message is exactly the same as the query. In most of the cases, these query are kind of paraphase the message, we want a search engine that could match a message and query roughly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ae0cc4d4b6c4ed41958c6bf94206f6b7",
     "grade": false,
     "grade_id": "cell-4c1d49d57702bd76",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Question 2: Levenshtein Edit Distance (Code Completion)\n",
    "\n",
    "In this section, we will now try using the more flexible edit distance metric (Levenshtein) to see if this improves the quality of our search results. For each query, we will need to loop over each message, and compute the edit distance each time -- like with `verbatim_search`, there are no obvious shortcuts.\n",
    "\n",
    "We've provided you with code to compute the edit matrix that we discussed in class. You will need to complete the code stub below. (You can refer to [the worksheet we used in class](http://www.cs.cornell.edu/courses/cs4300/2020sp/Slides/Lecture2worksheet.pdf) if you need a refresher on how this works.)\n",
    "\n",
    "Note: It is ok for there to be duplicates in your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "736ac8fe42b07f42cdb6cd6b3c8d9ca3",
     "grade": false,
     "grade_id": "cell-771cc8dcdbb0c533",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def insertion_cost(message, j):\n",
    "    return 1\n",
    "\n",
    "def deletion_cost(query, i):\n",
    "    return 1\n",
    "\n",
    "def substitution_cost(query, message, i, j):\n",
    "    if query[i-1] == message[j-1]:\n",
    "        return 0\n",
    "    else:\n",
    "        return 1\n",
    "    \n",
    "curr_insertion_function = insertion_cost\n",
    "curr_deletion_function = deletion_cost\n",
    "curr_substitution_function = substitution_cost\n",
    "\n",
    "def edit_matrix(query, message):\n",
    "    \"\"\" calculates the edit matrix\n",
    "    \n",
    "    Arguments\n",
    "    =========\n",
    "    \n",
    "    query: query string,\n",
    "        \n",
    "    message: message string,\n",
    "    \n",
    "    m: length of query + 1,\n",
    "    \n",
    "    n: length of message + 1,\n",
    "    \n",
    "    Returns:\n",
    "        edit matrix {(i,j): int}\n",
    "    \"\"\"\n",
    "    \n",
    "    m = len(query) + 1\n",
    "    n = len(message) + 1\n",
    "\n",
    "    chart = {(0, 0): 0}\n",
    "    for i in range(1, m): \n",
    "        chart[i,0] = chart[i-1, 0] + curr_deletion_function(query, i) \n",
    "    for j in range(1, n): \n",
    "        chart[0,j] = chart[0, j-1] + curr_insertion_function(message, j)\n",
    "    for i in range(1, m):\n",
    "        for j in range(1, n):\n",
    "            chart[i, j] = min(\n",
    "                chart[i-1, j] + curr_deletion_function(query, i),\n",
    "                chart[i, j-1] + curr_insertion_function(message, j),\n",
    "                chart[i-1, j-1] + curr_substitution_function(query, message, i, j)\n",
    "            )\n",
    "    return chart\n",
    "\n",
    "def edit_distance(query, message):\n",
    "    \"\"\" Edit distance calculator\n",
    "    \n",
    "    Arguments\n",
    "    =========\n",
    "    \n",
    "    query: query string,\n",
    "        \n",
    "    message: message string,\n",
    "    \n",
    "    Returns:\n",
    "        edit cost (int)\n",
    "    \"\"\"\n",
    "        \n",
    "    query = query.lower()\n",
    "    message = message.lower()\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    chart = edit_matrix(query, message)\n",
    "    return chart[len(query), len(message)]\n",
    "\n",
    "def edit_distance_search(query, msgs):\n",
    "    \"\"\" Edit distance search\n",
    "    \n",
    "    Arguments\n",
    "    =========\n",
    "    \n",
    "    query: string,\n",
    "        The query we are looking for.\n",
    "        \n",
    "    msgs: list of dicts,\n",
    "        Each message in this list has a 'text' field with\n",
    "        the raw document.\n",
    "    \n",
    "    Returns\n",
    "    =======\n",
    "    \n",
    "    result: list of (score, message) tuples.\n",
    "        The result list is sorted by score such that the closest match\n",
    "        is the top result in the list.\n",
    "    \n",
    "    \"\"\"\n",
    "    # YOUR CODE HERE\n",
    "    score_tuple = []\n",
    "    for epi in msgs:\n",
    "        edit_cost = edit_distance(query, epi['text'])\n",
    "        score_tuple.append((edit_cost, epi))\n",
    "    return sorted(score_tuple,key=lambda x: x[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "a6568ca385768d6a0b3501dba652aa08",
     "grade": false,
     "grade_id": "cell-d29b0562666e3a08",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "When the edit_distance_search function is completed you can run the lines below to print out the best matches for each query string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "df433830a31650134215ebb0816d27b4",
     "grade": true,
     "grade_id": "cell-e889255335356bfe",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#################################################################\n",
      "It's like a bunch of people running around talking about nothing.\n",
      "#################################################################\n",
      "[0.00] BRUCE: It's like a bunch of people running around talking about nothing.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[39.00] JONATHAN: It's like going to Justin Timberlake and talking about 'N Sync, like...\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[41.00] SIMON: I'll literally, at this point, take anything.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[41.00] SHIEH: It's a complete approach to skin rejuvenation.\n",
      "\t(Keeping Up With the Kardashians - Leaving the Nest)\n",
      "[41.00] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[41.00] KIM: I'm going to be riding around in my new Bentley.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[41.00] BRUCE: The guy's down; I feel good about this whole thing.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[42.00] JONATHAN: I've literally been reading about...\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[42.00] KOURTNEY: I'm not going to go tell him anything.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[42.00] KHLOE: She's probably posing, and going like this.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "\n",
      "#############################################################################################\n",
      "Never say to a famous person that this possible endorsment would bring 'er to the spot light.\n",
      "#############################################################################################\n",
      "[42.00] SIMON: You don't tell an international celebrity that this possible endorsement could bring her back into the spotlight.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[59.00] KRIS: You need to trust that I actually know what I'm doing at some point.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[60.00] ALEX: I feel like people want to see you, like, back in the spotlight.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[60.00] KHLOE: Trust me, this is the most entertaining part of the entire night.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[61.00] ROB: Yeah, and they were supposed to be... we all were supposed to be on the same flight.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[61.00] BRUCE: They gave us a great suite to be able to relax before the big fight.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[62.00] KHLOE: He's like, \"Oh, this piece looks just like your mother's.\" Like...\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[62.00] KHLOE: And if this is even the right time for me to start my own line.\n",
      "\t(Keeping Up With the Kardashians - Leaving the Nest)\n",
      "[62.00] KRIS: What they said was that Hef was really excited about the photo shoot.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[62.00] BRUCE: That was the whole idea of doing the shoot.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "\n",
      "##########################################################\n",
      "She just told me to get in the car and buckle my seatbelt.\n",
      "##########################################################\n",
      "[34.00] KIM: Stop and go get in the car and stop being rude and a brat.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[34.00] KRIS: He just did it for the articles.\n",
      "\t(Keeping Up With the Kardashians - Brody in the House)\n",
      "[34.00] KIM: I just hope that I made Carol Ann proud of me.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[35.00] KRIS: What time does the plane leave Los Angeles.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[35.00] SCOTT: Don't look at them in their eye if they're there.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[35.00] BRUCE: This little monkey at the park is just a ball.\n",
      "\t(Keeping Up With the Kardashians - Leaving the Nest)\n",
      "[35.00] KRIS: It's just gone a little too far, and I'm done.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[35.00] BRUCE: It's time to get her in shape.\n",
      "\t(Keeping Up With the Kardashians - Brody in the House)\n",
      "[35.00] BRUCE: She just doesn't seem to be very tough at all.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[35.00] KRIS: She's gonna get out there and have the same treatment?\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "\n",
      "######################################\n",
      "I'm going to Maryland, did I tell you?\n",
      "######################################\n",
      "[20.00] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "[22.00] KHLOE: I'm going to go to jail.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[23.00] KOURTNEY: We're going to dinner with Khloe.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[24.00] KIM: I'm gonna go get my hair and makeup done.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[24.00] KIM: I'm here for work, and this is serious.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[24.00] KRIS: I'm disappointed in you.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[24.00] BRANDON: Is that what they told you?\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[24.00] KIM: So I'm going to let him think that.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[24.00] KHLOE: I'm going to be, like, you, you ugly monster.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[24.00] BRUCE: I'm looking forward to this.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# This is an autograder test. Here we can test the function you just wrote above.\n",
    "score, _ = edit_distance_search(queries[1], flat_msgs)[0]\n",
    "assert score == 42\n",
    "\n",
    "\n",
    "# note: this will take about 1-2 minutes to execute\n",
    "top_10 = []\n",
    "for query in queries:\n",
    "    print(\"#\" * len(query))\n",
    "    print(query)\n",
    "    print(\"#\" * len(query))\n",
    "\n",
    "    for score, msg in edit_distance_search(query, flat_msgs)[:10]:\n",
    "        print(\"[{:.2f}] {}: {}\\n\\t({})\".format(\n",
    "            score,\n",
    "            msg['speaker'],\n",
    "            msg['text'],\n",
    "            msg['episode_title']))\n",
    "        top_10.append(msg)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ffb1bee2269acabacc18be04235919ca",
     "grade": false,
     "grade_id": "cell-35b2924e9ef15b92",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "# Question 2b: Query Discussion and Analysis (Free Response)\n",
    "\n",
    "What do you notice about the search above?\n",
    "1. Discuss why it worked, or why it might not have worked, for each query. \n",
    "\n",
    "2. Do you notice anything different about the costs to those discussed in lecture? \n",
    "\n",
    "3. Please fill out the table below with the costs from running the Levenshtein algorithm discussed in lecture and the cost from using the edit_distance function we provided above. Copy-and-paste this markdown table into the cell below for your answers:\n",
    "```\n",
    "| Operation    | Cost (Lecture)|  Cost (edit_distance)  | Example\n",
    "| :----------: |:------------- | :-------------------------- | --------\n",
    "| Addition     | YOUR ANSWER   | YOUR ANSWER                 | \"aa\" -> \"aab\"\n",
    "| Deletion     | YOUR ANSWER   | YOUR ANSWER                 | \"aa\" -> \"a\"\n",
    "| None         | YOUR ANSWER   | YOUR ANSWER                 | \"aa\" -> \"aa\"\n",
    "| Substitution | YOUR ANSWER   | YOUR ANSWER                 | \"aa\" -> \"ab\"\n",
    "| Multiple     | YOUR ANSWER   | YOUR ANSWER                 | \"trawl\" --> \"claw\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "8ccb48deecee0e5b36c40975b4a2a6b4",
     "grade": true,
     "grade_id": "cell-9f640f0b2d2bf32a",
     "locked": false,
     "points": 15,
     "schema_version": 3,
     "solution": true
    }
   },
   "source": [
    "YOUR ANSWER HERE\n",
    "\n",
    "1. This might not have worked, since the query here is a sentence with a lot of words and spaces, if we used this method, we may ignore the sequence of the words in a sentence. For example, if a sentence_A is \"Kardshina is a beauty\", sentence_B is \"beauty is Kardshina\", and sentence_C is \"Kardshian is a bread\", in this way, sentence_A and sentence_c edit distance =6 will be lower than sentence_A and sentence_B=17, however, in fact sentence_A and B are more closer.\n",
    "\n",
    "2. Yes, there are some differnce, for example, in the subsitute part, in the lecture, we think the cost is 2, because we delete and insert, but in this case, the substitute cost is 1.\n",
    "\n",
    "3.\n",
    "\n",
    "```\n",
    "\n",
    "| Operation    | Cost (Lecture)|  Cost (edit_distance)       | Example\n",
    "| :----------: |:------------- | :-------------------------- | --------\n",
    "| Addition     | 1             | 1                           | \"aa\" -> \"aab\"\n",
    "| Deletion     | 1             | 1                           | \"aa\" -> \"a\"\n",
    "| None         | 0             | 0                           | \"aa\" -> \"aa\"\n",
    "| Substitution | 2             | 1                           | \"aa\" -> \"ab\"\n",
    "| Multiple     | 5             | 3                           | \"trawl\" --> \"claw\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "63d0b7dd31045f5b778e494f62b42718",
     "grade": false,
     "grade_id": "cell-9579a2967110135a",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Question 3: Implementing Edit Operations\n",
    "The purpose of edit distance is not just for us to understand the lowest distance between two strings, but also what edits can be performed to turn one string into another. Using the edit matrix, it is possible to traverse backward and get a series of operations back that tell us how one string can be altered to produce another string.\n",
    "\n",
    "We would like you to implement a function that will tell us how to write our message string as a function of our query string. We have provided you a skeleton code to help with this implementation.\n",
    "\n",
    "Below is an example of the operations required to turn 'Kardashians' into 'Dalmatians'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6a102322f210ea3060e1e47139548498",
     "grade": false,
     "grade_id": "cell-dc68b6ed8abd84dc",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "edit operations: [('replace', 0, 0), ('replace', 2, 2), ('replace', 3, 3), ('delete', 5, 5), ('replace', 6, 5)]\n"
     ]
    }
   ],
   "source": [
    "a = \"kardashians\"\n",
    "b = \"dalmatians\"\n",
    "edits = [('replace', 0, 0), ('replace', 2, 2), ('replace', 3, 3), ('delete', 5, 5), ('replace', 6, 5)]\n",
    "print('edit operations:', edits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9093ed647bd283b7e76d59df2d83e565",
     "grade": false,
     "grade_id": "cell-5593411bd4a527c7",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def get_editops(str_a, str_b):\n",
    "    \n",
    "    \"\"\" Get Edit Operations\n",
    "    \n",
    "    Arguments\n",
    "    =========\n",
    "    \n",
    "    str_a: the original query string.\n",
    "                \n",
    "    str_b: the message that we are comparing the query to.\n",
    "    \n",
    "    Returns\n",
    "    =======\n",
    "    \n",
    "    An ordered minimum list of edit operations needed to turn\n",
    "    str_a into str_b. Note that the number of edit operations\n",
    "    returned should never exceed the total edit distance between\n",
    "    str_a and str_b.\n",
    "    \n",
    "    These operations should be in a list of 3-tuples that take\n",
    "    the form:\n",
    "       * ('delete', x, y) for a deletion\n",
    "       * ('insert', x, y) for an insertion\n",
    "       * ('replace', x, y) for a replacement\n",
    "    Where x and y are the positions of the characters the operation\n",
    "    applies to. x is the position of the query string and y is\n",
    "    the position of the message string.\n",
    "    \n",
    "    You should feel free to leverage any of the functions we\n",
    "    have already provided you.\n",
    "    \n",
    "    Hint: To calculate these operations, you should start in \n",
    "    the bottom right of the matrix (with the winning edit distance) \n",
    "    and traverse up the optimal possible path to the top left\n",
    "    corner of the matrix.\n",
    "    \n",
    "    Hint: Remember that insertions and deletions always have a\n",
    "    cost, and substitutions sometimes have a cost.\n",
    "    \n",
    "    Note: Don't forget to use the cost functions we've provided\n",
    "    instead of relying on hard coding these values!\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    # initialise variables\n",
    "    i = len(str_a)\n",
    "    j = len(str_b)\n",
    "    str_a = str_a.lower()\n",
    "    str_b = str_b.lower()\n",
    "    matrix = edit_matrix(str_a, str_b)\n",
    "    edit_ops = []\n",
    "    \n",
    "    # this algorithm ends once we have worked our way\n",
    "    # back to the (0,0) location in the matrix\n",
    "    \n",
    "    while (i,j) != (0,0):\n",
    "        curr_cell = matrix[i, j]\n",
    "        \n",
    "        # what must you do if you can no longer traverse left?\n",
    "        if (i != 0 and j == 0):\n",
    "            # YOUR CODE HERE\n",
    "            edit_ops.append(('delete', i-1,0))\n",
    "            i-=1\n",
    "            \n",
    "        # what must you do if you can no longer traverse up?\n",
    "        elif (i == 0 and j != 0):\n",
    "            # YOUR CODE HERE\n",
    "            edit_ops.append(('insert', 0, j-1))\n",
    "            j-=1\n",
    "            \n",
    "        # this will get called if you can traverse either left,\n",
    "        # up, or diagonally\n",
    "        else:\n",
    "            up_cell = matrix[i-1, j]\n",
    "            left_cell = matrix[i, j-1]\n",
    "            diag_cell = matrix[i-1, j-1]\n",
    "            \n",
    "            # we calculate the minimum as before\n",
    "            curr_min = min(\n",
    "                up_cell + curr_deletion_function(str_a, i),\n",
    "                left_cell + curr_insertion_function(str_b, j), \n",
    "                diag_cell + curr_substitution_function(str_a, str_b, i, j)\n",
    "            )\n",
    "            \n",
    "            # for the shortest path, traverse up towards the\n",
    "            # left corner in any possible direction that\n",
    "            # minimizes the total cost\n",
    "            \n",
    "            # YOUR CODE HERE\n",
    "            if curr_min == diag_cell:\n",
    "                i-=1\n",
    "                j-=1\n",
    "                \n",
    "                \n",
    "            elif (curr_min==up_cell+1):\n",
    "                edit_ops.append(('delete', i-1,j-1))\n",
    "                i = i-1\n",
    "                \n",
    "            elif (curr_min==left_cell+1):\n",
    "                edit_ops.append(('insert', i-1,j-1))\n",
    "                j = j-1\n",
    "                \n",
    "            elif (curr_min==diag_cell+1):\n",
    "                edit_ops.append(('replace', i-1,j-1))\n",
    "                i = i-1\n",
    "                j = j-1\n",
    "            \n",
    "    #this will return a reversed list of edit operations\n",
    "    return edit_ops[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "af0db933fea59c680a9a9b751bbb76b3",
     "grade": true,
     "grade_id": "cell-1aed43dbd749f3be",
     "locked": true,
     "points": 20,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# This is an autograder test. Here we can test the function you just wrote above.\n",
    "a = \"kardashians\"\n",
    "b = \"dalmatians\"\n",
    "edits = get_editops(a,b)\n",
    "assert edits == ([('replace', 0, 0), ('replace', 2, 2), ('replace', 3, 3), ('delete', 5, 5), ('replace', 6, 5)])\\\n",
    "    or ([('replace', 0, 0), ('replace', 2, 2), ('replace', 3, 3), ('replace', 5, 5), ('delete', 6, 6)])\n",
    "assert (len(edits)) == edit_distance(a,b)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "47d13dffa9c3fb1437209280496abaf2",
     "grade": false,
     "grade_id": "cell-095f34e0dd5c9cc5",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Question 4a: Visualizing Edit Distance (Code Completition)\n",
    "\n",
    "We've provided some code below that displays the edits that need to be made to a string to transform it into another string. Your job in this assignment is visualize the edits for the 4 queries at the top of this assignment to get a feel for how edit distance is working. \n",
    "\n",
    "For each of your searches in Q2, we would now like you to display the edit transformations from each query to each of its top-10 search results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2c35e6da39a7d33715d901ad8cdbebfe",
     "grade": false,
     "grade_id": "cell-98bdbd514bece3b7",
     "locked": true,
     "schema_version": 3,
     "solution": false
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style type=\"text/css\">\n",
       "\n",
       ".edit {font-size: 20px;}\n",
       ".del {text-decoration: line-through; color: #aaa;}\n",
       ".add {color: green; font-weight: bold;}\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def print_edits(str_a, str_b, edits):\n",
    "    output = [[char] for char in str_a]\n",
    "    indices = np.arange(len(str_a) + 1)\n",
    "    for op, src, dest in edits:\n",
    "        if op == 'insert':\n",
    "            src = indices[src]\n",
    "            output.insert(src, [\"<span class='add'>{}</span>\".format(str_b[dest])])\n",
    "            indices += 1\n",
    "        elif op == 'replace':\n",
    "            src = indices[src]\n",
    "            src_char = output[src][0]\n",
    "            output[src] = output[src][1:]\n",
    "            output[src].append(\"<span class='del'>{}</span><span class='add'>{}</span>\".format(src_char, str_b[dest]))\n",
    "        elif op == 'delete':\n",
    "            src = indices[src]\n",
    "            src_char = output[src].pop()\n",
    "            output[src].append(\"<span class='del'>{}</span>\".format(src_char))\n",
    "    \n",
    "    return \"<div class='edit'>{}</div>\".format(\"\".join(\"\".join(stack) for stack in output))\n",
    "\n",
    "HTML(\"\"\"\n",
    "<style type=\"text/css\">\n",
    "\n",
    ".edit {font-size: 20px;}\n",
    ".del {text-decoration: line-through; color: #aaa;}\n",
    ".add {color: green; font-weight: bold;}\n",
    "</style>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6f16ec8b4fd10acce54ae9cc8d04365a",
     "grade": false,
     "grade_id": "cell-14aa02664d600a44",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "We can now vizualise the edit distances and operations we were working with before!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e42d748dcf57deb56c61ef734eba1bfd",
     "grade": false,
     "grade_id": "cell-69e376681f7b56c7",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>k</span><span class='add'>d</span>a<span class='del'>r</span><span class='add'>l</span><span class='del'>d</span><span class='add'>m</span>a<span class='del'>s</span><span class='del'>h</span><span class='add'>t</span>ians</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = \"kardashians\"\n",
    "b = \"dalmatians\"\n",
    "edits = [('replace', 0, 0), ('replace', 2, 2), ('replace', 3, 3), ('delete', 5, 5), ('replace', 6, 5)]\n",
    "\n",
    "display(HTML(print_edits(a, b, edits)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "fd96edf802dd2113e548292c751868d7",
     "grade": false,
     "grade_id": "cell-348904e56153d89c",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "#### Use the provided `HTML` and `print_edits` functions to visualize the edits for each of the search results you computed in Q2. You should display the top-10 scoring search results for each query.\n",
    "\n",
    "Hint: To display edits from the `HTML`, you will need to use the `display` method as shown above.\n",
    "\n",
    "Hint: You will want to use `top_10` here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e744f44d7fa2876f137c877e67bfb532",
     "grade": true,
     "grade_id": "cell-69666c4a403e09f1",
     "locked": false,
     "points": 5,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#################################################################\n",
      "It's like a bunch of people running around talking about nothing.\n",
      "#################################################################\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>It's like a bunch of people running around talking about nothing.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>It's like <span class='del'>a</span><span class='add'>g</span><span class='del'> </span><span class='add'>o</span><span class='del'>b</span><span class='add'>i</span><span class='del'>u</span>n<span class='del'>c</span><span class='add'>g</span><span class='del'>h</span><span class='add'>t</span> o<span class='del'>f</span> <span class='del'>p</span><span class='add'>J</span><span class='del'>e</span><span class='add'>u</span><span class='del'>o</span><span class='add'>s</span><span class='del'>p</span><span class='add'>t</span><span class='del'>l</span><span class='add'>i</span><span class='del'>e</span><span class='add'>n</span> <span class='del'>r</span><span class='add'>T</span><span class='del'>u</span><span class='add'>i</span><span class='del'>n</span><span class='add'>m</span><span class='del'>n</span><span class='add'>b</span><span class='del'>i</span><span class='add'>e</span><span class='del'>n</span><span class='add'>r</span><span class='add'>a</span><span class='add'>k</span><span class='add'>e</span><span class='del'>g</span><span class='add'>l</span> a<span class='del'>r</span><span class='add'>n</span><span class='del'>o</span><span class='del'>u</span>nd talking about n<span class='del'>o</span><span class='add'> </span><span class='del'>t</span><span class='add'>S</span><span class='add'>n</span><span class='add'>c</span><span class='add'>,</span><span class='add'> </span><span class='add'>l</span><span class='del'>h</span><span class='add'>y</span>i<span class='del'>n</span><span class='add'>k</span><span class='add'>.</span><span class='add'>.</span><span class='del'>g</span><span class='add'>e</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span>t'<span class='add'>l</span><span class='del'>s</span><span class='add'>l</span> li<span class='del'>k</span><span class='add'>t</span>e<span class='del'> </span><span class='add'>r</span>a<span class='del'> </span><span class='add'>l</span><span class='del'>b</span><span class='add'>l</span><span class='del'>u</span><span class='add'>y</span><span class='del'>n</span><span class='add'>,</span><span class='del'>c</span><span class='del'>h</span> <span class='del'>o</span><span class='add'>a</span><span class='del'>f</span><span class='add'>t</span> <span class='del'>p</span><span class='add'>t</span><span class='del'>e</span><span class='add'>h</span><span class='del'>o</span><span class='add'>i</span><span class='del'>p</span><span class='add'>s</span><span class='del'>l</span><span class='del'>e</span> <span class='del'>r</span><span class='add'>p</span><span class='del'>u</span><span class='add'>o</span><span class='del'>n</span><span class='del'>n</span>in<span class='del'>g</span><span class='add'>t</span><span class='del'> </span><span class='add'>,</span><span class='del'>a</span><span class='del'>r</span><span class='del'>o</span><span class='del'>u</span><span class='del'>n</span><span class='del'>d</span> <span class='del'>t</span>alk<span class='del'>i</span><span class='add'>e</span><span class='del'>n</span><span class='del'>g</span><span class='del'> </span><span class='del'>a</span><span class='del'>b</span><span class='del'>o</span><span class='del'>u</span>t n<span class='del'>o</span><span class='add'>y</span>thing.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span><span class='del'>t</span><span class='del'>'</span><span class='del'>s</span><span class='del'> </span><span class='del'>l</span><span class='del'>i</span><span class='del'>k</span><span class='del'>e</span><span class='del'> </span>a bunch o<span class='del'>f</span><span class='add'>m</span><span class='del'> </span><span class='add'>l</span>pe<span class='del'>o</span><span class='add'>t</span><span class='del'>p</span><span class='del'>l</span>e <span class='del'>r</span><span class='add'>a</span><span class='del'>u</span><span class='add'>p</span><span class='del'>n</span><span class='add'>p</span><span class='del'>n</span><span class='del'>i</span><span class='del'>n</span><span class='del'>g</span><span class='del'> </span><span class='del'>a</span>ro<span class='del'>u</span><span class='add'>a</span><span class='del'>n</span><span class='add'>c</span><span class='del'>d</span><span class='add'>h</span> t<span class='del'>a</span><span class='add'>o</span><span class='add'>s</span><span class='del'>l</span><span class='add'> </span>k<span class='del'>i</span>ng <span class='del'>a</span><span class='add'>r</span><span class='del'>b</span><span class='add'>e</span><span class='del'>o</span><span class='add'>j</span>u<span class='del'>t</span><span class='add'>v</span><span class='del'> </span><span class='add'>e</span>n<span class='del'>o</span><span class='add'>a</span><span class='del'>t</span>h<span class='add'>o</span>in<span class='del'>g</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span>t'<span class='del'>s</span><span class='add'>m</span><span class='del'> </span><span class='del'>l</span><span class='del'>i</span><span class='del'>k</span><span class='del'>e</span><span class='del'> </span><span class='del'>a</span><span class='del'> </span><span class='del'>b</span><span class='del'>u</span><span class='del'>n</span><span class='del'>c</span>h o<span class='del'>f</span><span class='add'>t</span> <span class='del'>p</span><span class='add'>g</span><span class='del'>e</span><span class='del'>o</span><span class='del'>p</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span><span class='del'>r</span><span class='del'>u</span><span class='del'>n</span><span class='del'>n</span><span class='del'>i</span><span class='del'>n</span>g around <span class='del'>t</span><span class='add'>y</span><span class='del'>a</span><span class='add'>o</span><span class='del'>l</span><span class='add'>u</span><span class='del'>k</span><span class='add'>'</span><span class='del'>i</span><span class='add'>r</span><span class='del'>n</span><span class='add'>e</span><span class='del'>g</span> <span class='del'>a</span><span class='add'>n</span><span class='del'>b</span><span class='del'>o</span>ut <span class='del'>n</span><span class='add'>g</span><span class='del'>o</span><span class='del'>t</span>hing.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span>t'<span class='del'>s</span><span class='add'>m</span> <span class='add'>o</span><span class='del'>l</span><span class='add'>g</span>i<span class='del'>k</span><span class='add'>n</span><span class='del'>e</span><span class='add'>g</span> <span class='del'>a</span><span class='add'>t</span><span class='del'> </span><span class='del'>b</span><span class='del'>u</span><span class='del'>n</span><span class='del'>c</span><span class='del'>h</span><span class='del'> </span>o<span class='del'>f</span> <span class='del'>p</span><span class='add'>b</span><span class='del'>e</span><span class='del'>o</span><span class='del'>p</span><span class='del'>l</span>e r<span class='del'>u</span><span class='add'>i</span><span class='del'>n</span><span class='add'>d</span><span class='del'>n</span>ing around <span class='del'>t</span><span class='add'>i</span><span class='del'>a</span><span class='add'>n</span><span class='del'>l</span><span class='add'> </span><span class='del'>k</span><span class='add'>m</span><span class='add'> </span><span class='del'>i</span><span class='add'>y</span>n<span class='add'>w</span><span class='del'>g</span><span class='add'>e</span> <span class='del'>a</span>b<span class='del'>o</span><span class='add'>e</span><span class='del'>u</span><span class='del'>t</span><span class='del'> </span>n<span class='del'>o</span>t<span class='del'>h</span><span class='add'>l</span><span class='del'>i</span><span class='add'>e</span><span class='del'>n</span><span class='add'>y</span><span class='del'>g</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span>t<span class='del'>'</span><span class='add'>h</span><span class='del'>s</span><span class='add'>e</span> <span class='del'>l</span><span class='add'>g</span><span class='del'>i</span><span class='add'>u</span><span class='del'>k</span><span class='add'>y</span><span class='add'>s</span><span class='del'>e</span><span class='add'>'</span> <span class='del'>a</span><span class='add'>d</span><span class='del'> </span><span class='add'>o</span><span class='del'>b</span><span class='add'>w</span><span class='del'>u</span>n<span class='del'>c</span><span class='add'>;</span><span class='del'>h</span> <span class='del'>o</span><span class='add'>I</span><span class='del'>f</span> <span class='del'>p</span><span class='add'>f</span>e<span class='del'>o</span><span class='add'>e</span><span class='del'>p</span><span class='del'>l</span>e <span class='del'>r</span><span class='add'>g</span><span class='del'>u</span><span class='add'>o</span><span class='del'>n</span><span class='add'>o</span><span class='del'>n</span><span class='add'>d</span><span class='del'>i</span><span class='del'>n</span><span class='del'>g</span> a<span class='del'>r</span><span class='add'>b</span>ou<span class='del'>n</span><span class='add'>t</span><span class='del'>d</span> t<span class='del'>a</span><span class='add'>h</span><span class='del'>l</span><span class='del'>k</span>i<span class='del'>n</span><span class='add'>s</span><span class='del'>g</span> <span class='del'>a</span><span class='add'>w</span><span class='del'>b</span><span class='add'>h</span>o<span class='del'>u</span><span class='add'>l</span><span class='del'>t</span><span class='add'>e</span><span class='del'> </span><span class='del'>n</span>othing.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span>t'<span class='add'>e</span><span class='del'>s</span><span class='add'>v</span> li<span class='del'>k</span><span class='add'>t</span>e<span class='del'> </span><span class='add'>r</span>a<span class='del'> </span><span class='add'>l</span><span class='del'>b</span><span class='add'>l</span><span class='del'>u</span><span class='add'>y</span><span class='del'>n</span><span class='del'>c</span><span class='del'>h</span> <span class='del'>o</span><span class='add'>b</span><span class='del'>f</span><span class='del'> </span><span class='del'>p</span><span class='del'>e</span><span class='del'>o</span><span class='del'>p</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span>r<span class='del'>u</span><span class='del'>n</span><span class='del'>n</span><span class='del'>i</span><span class='del'>n</span>g ar<span class='del'>o</span><span class='add'>e</span><span class='del'>u</span><span class='add'>a</span><span class='del'>n</span><span class='del'>d</span><span class='del'> </span><span class='del'>t</span>a<span class='del'>l</span><span class='del'>k</span>ing about<span class='del'> </span><span class='add'>.</span><span class='del'>n</span><span class='add'>.</span><span class='del'>o</span><span class='del'>t</span><span class='del'>h</span><span class='del'>i</span><span class='del'>n</span><span class='del'>g</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span>t'<span class='del'>s</span><span class='add'>m</span><span class='del'> </span><span class='del'>l</span><span class='del'>i</span><span class='del'>k</span><span class='del'>e</span><span class='del'> </span><span class='del'>a</span><span class='del'> </span><span class='del'>b</span><span class='del'>u</span><span class='del'>n</span><span class='del'>c</span>h o<span class='del'>f</span><span class='add'>t</span> <span class='del'>p</span><span class='add'>g</span><span class='del'>e</span><span class='del'>o</span><span class='del'>p</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span><span class='del'>r</span><span class='del'>u</span><span class='del'>n</span>ning <span class='del'>a</span><span class='add'>t</span><span class='del'>r</span>o<span class='del'>u</span><span class='add'> </span><span class='del'>n</span><span class='add'>g</span><span class='del'>d</span><span class='add'>o</span> t<span class='del'>a</span><span class='add'>e</span>l<span class='add'> </span><span class='add'>h</span><span class='del'>k</span><span class='add'>l</span>i<span class='del'>n</span><span class='add'>m</span><span class='del'>g</span> <span class='del'>a</span><span class='del'>b</span><span class='del'>o</span>u<span class='del'>t</span><span class='del'> </span>n<span class='del'>o</span><span class='add'>y</span>thing.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span><span class='add'>S</span><span class='add'>e</span><span class='del'>t</span><span class='add'>h</span>'s <span class='del'>l</span><span class='add'>p</span><span class='del'>i</span><span class='add'>r</span><span class='del'>k</span><span class='add'>o</span><span class='del'>e</span><span class='add'>b</span><span class='del'> </span><span class='del'>a</span> b<span class='del'>u</span><span class='add'>l</span><span class='del'>n</span><span class='add'>y</span><span class='del'>c</span><span class='del'>h</span><span class='del'> </span><span class='del'>o</span><span class='del'>f</span><span class='del'> </span>peo<span class='del'>p</span><span class='add'>s</span><span class='del'>l</span><span class='add'>i</span><span class='del'>e</span><span class='del'> </span><span class='del'>r</span><span class='del'>u</span>n<span class='del'>n</span><span class='add'>g</span><span class='del'>i</span><span class='del'>n</span>g <span class='del'>a</span><span class='del'>r</span><span class='del'>o</span>und <span class='del'>t</span><span class='add'>g</span><span class='del'>a</span><span class='add'>o</span><span class='del'>l</span><span class='del'>k</span>ing <span class='del'>a</span><span class='add'>l</span><span class='del'>b</span><span class='add'>i</span><span class='del'>o</span><span class='add'>k</span><span class='del'>u</span><span class='add'>e</span><span class='del'>t</span><span class='del'> </span><span class='del'>n</span>othi<span class='del'>n</span><span class='add'>s</span><span class='del'>g</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#############################################################################################\n",
      "Never say to a famous person that this possible endorsment would bring 'er to the spot light.\n",
      "#############################################################################################\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>Y</span><span class='del'>e</span><span class='add'>o</span><span class='del'>v</span><span class='add'>u</span><span class='del'>e</span><span class='add'> </span><span class='del'>r</span><span class='add'>d</span><span class='del'> </span><span class='add'>o</span><span class='del'>s</span><span class='add'>n</span><span class='del'>a</span><span class='add'>'</span><span class='del'>y</span><span class='add'>t</span> t<span class='add'>l</span><span class='add'>l</span><span class='add'> </span><span class='del'>o</span><span class='add'>e</span> a <span class='add'>n</span><span class='add'>t</span><span class='add'>e</span><span class='add'>r</span><span class='add'>n</span><span class='del'>f</span><span class='add'>i</span>a<span class='add'>i</span><span class='del'>m</span><span class='add'>t</span>o<span class='del'>u</span><span class='add'>n</span><span class='add'>l</span><span class='del'>s</span><span class='add'>a</span> <span class='add'>e</span><span class='add'>l</span><span class='add'>e</span><span class='del'>p</span><span class='add'>c</span>er<span class='del'>s</span><span class='add'>i</span><span class='del'>o</span><span class='add'>t</span><span class='add'> </span><span class='del'>n</span><span class='add'>y</span> that this possible endorsment <span class='del'>w</span><span class='add'>c</span>ould bring <span class='add'>e</span><span class='add'>r</span><span class='add'> </span><span class='add'>b</span><span class='add'>a</span><span class='add'>c</span><span class='add'>k</span><span class='del'>'</span><span class='add'>h</span>er t<span class='del'>o</span> the spot light.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>Y</span><span class='del'>e</span><span class='add'>o</span><span class='del'>v</span><span class='add'>u</span><span class='del'>e</span><span class='add'> </span><span class='del'>r</span><span class='add'>n</span><span class='del'> </span><span class='add'>e</span><span class='del'>s</span><span class='add'>e</span><span class='del'>a</span><span class='add'>d</span><span class='del'>y</span> to <span class='del'>a</span><span class='add'>t</span><span class='del'> </span><span class='add'>r</span><span class='del'>f</span><span class='del'>a</span><span class='del'>m</span><span class='del'>o</span>us<span class='del'> </span><span class='add'>t</span><span class='del'>p</span><span class='del'>e</span><span class='del'>r</span><span class='del'>s</span><span class='del'>o</span><span class='del'>n</span><span class='del'> </span>t<span class='del'>h</span><span class='del'>a</span>t this <span class='del'>p</span><span class='add'>a</span><span class='del'>o</span><span class='add'>c</span><span class='del'>s</span><span class='add'>t</span><span class='del'>s</span><span class='add'>u</span><span class='del'>i</span><span class='add'>a</span><span class='del'>b</span><span class='add'>l</span>l<span class='del'>e</span><span class='add'>y</span> <span class='del'>e</span><span class='add'>k</span><span class='del'>n</span>do<span class='del'>r</span><span class='add'>w</span><span class='del'>s</span><span class='add'> </span><span class='del'>m</span><span class='add'>w</span><span class='del'>e</span><span class='add'>h</span><span class='del'>n</span><span class='add'>a</span>t <span class='del'>w</span><span class='add'>I</span><span class='del'>o</span><span class='add'>'</span><span class='del'>u</span><span class='add'>m</span><span class='del'>l</span><span class='add'> </span>d<span class='del'> </span><span class='add'>o</span><span class='del'>b</span><span class='del'>r</span>ing <span class='del'>'</span><span class='add'>a</span><span class='del'>e</span><span class='add'>t</span><span class='del'>r</span> <span class='del'>t</span><span class='add'>s</span>o<span class='del'> </span><span class='add'>m</span><span class='del'>t</span><span class='del'>h</span><span class='del'>e</span><span class='del'> </span><span class='del'>s</span><span class='del'>p</span>ot li<span class='del'>g</span><span class='add'>n</span><span class='del'>h</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>I</span><span class='del'>e</span><span class='add'> </span><span class='del'>v</span><span class='add'>f</span>e<span class='del'>r</span><span class='add'>e</span><span class='del'> </span><span class='add'>l</span><span class='del'>s</span><span class='del'>a</span><span class='del'>y</span> <span class='del'>t</span><span class='add'>l</span><span class='del'>o</span><span class='add'>i</span><span class='del'> </span><span class='add'>k</span><span class='del'>a</span><span class='add'>e</span> <span class='del'>f</span><span class='add'>p</span><span class='del'>a</span><span class='add'>e</span><span class='del'>m</span>o<span class='del'>u</span><span class='add'>p</span><span class='del'>s</span><span class='add'>l</span><span class='del'> </span><span class='del'>p</span>e<span class='del'>r</span><span class='add'> </span><span class='del'>s</span><span class='add'>w</span><span class='del'>o</span><span class='add'>a</span><span class='del'>n</span><span class='del'> </span><span class='del'>t</span>h<span class='del'>a</span>t t<span class='del'>h</span><span class='add'>o</span><span class='del'>i</span><span class='del'>s</span><span class='del'> </span><span class='del'>p</span>os<span class='del'>s</span><span class='add'>e</span><span class='del'>i</span><span class='del'>b</span><span class='del'>l</span>e <span class='del'>e</span><span class='add'>y</span><span class='del'>n</span><span class='del'>d</span>o<span class='del'>r</span><span class='add'>u</span><span class='del'>s</span><span class='add'>,</span><span class='del'>m</span><span class='del'>e</span><span class='del'>n</span><span class='del'>t</span> <span class='del'>w</span><span class='add'>l</span><span class='del'>o</span><span class='add'>i</span><span class='del'>u</span><span class='add'>k</span><span class='del'>l</span><span class='add'>e</span><span class='del'>d</span><span class='add'>,</span> b<span class='del'>r</span><span class='add'>a</span><span class='del'>i</span><span class='add'>c</span><span class='del'>n</span><span class='add'>k</span><span class='del'>g</span> <span class='del'>'</span><span class='add'>i</span><span class='del'>e</span><span class='add'>n</span><span class='del'>r</span><span class='del'> </span><span class='del'>t</span><span class='del'>o</span><span class='del'> </span>the spot light.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>T</span><span class='del'>e</span><span class='del'>v</span><span class='del'>e</span>r<span class='del'> </span><span class='add'>u</span><span class='del'>s</span><span class='del'>a</span><span class='del'>y</span><span class='del'> </span><span class='del'>t</span><span class='del'>o</span><span class='del'> </span><span class='del'>a</span> fam<span class='del'>o</span><span class='add'>e</span><span class='del'>u</span><span class='add'>,</span><span class='del'>s</span> <span class='del'>p</span><span class='add'>t</span><span class='del'>e</span><span class='add'>h</span><span class='del'>r</span><span class='add'>i</span><span class='del'>s</span><span class='del'>o</span>n <span class='del'>t</span><span class='add'>i</span><span class='del'>h</span><span class='add'>s</span><span class='del'>a</span><span class='del'>t</span> th<span class='del'>i</span><span class='add'>e</span><span class='del'>s</span> <span class='del'>p</span><span class='add'>m</span>os<span class='del'>s</span><span class='add'>t</span><span class='del'>i</span><span class='del'>b</span><span class='del'>l</span><span class='del'>e</span> en<span class='del'>d</span><span class='add'>t</span><span class='del'>o</span><span class='add'>e</span>r<span class='del'>s</span><span class='add'>t</span><span class='del'>m</span><span class='add'>a</span><span class='del'>e</span><span class='add'>i</span><span class='del'>n</span><span class='del'>t</span><span class='del'> </span>w<span class='del'>o</span><span class='del'>u</span><span class='del'>l</span><span class='del'>d</span><span class='del'> </span><span class='del'>b</span><span class='del'>r</span>ing <span class='del'>'</span><span class='add'>p</span><span class='add'>r</span><span class='del'>e</span><span class='add'>a</span>r <span class='del'>t</span><span class='add'>f</span>o the <span class='del'>s</span><span class='add'>e</span><span class='del'>p</span><span class='add'>n</span><span class='del'>o</span><span class='add'>i</span><span class='add'>r</span><span class='add'>e</span>t <span class='del'>l</span><span class='add'>n</span>ight.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>Y</span>e<span class='del'>v</span><span class='add'>a</span><span class='del'>e</span><span class='add'>h</span><span class='del'>r</span><span class='add'>,</span><span class='del'> </span>sa<span class='add'>d</span><span class='del'>y</span><span class='add'>n</span> t<span class='del'>o</span><span class='add'>h</span><span class='del'> </span><span class='add'>e</span><span class='del'>a</span><span class='add'>y</span> <span class='del'>f</span><span class='add'>w</span><span class='del'>a</span><span class='add'>e</span><span class='del'>m</span><span class='add'>r</span><span class='del'>o</span><span class='add'>e</span><span class='del'>u</span><span class='add'> </span>s<span class='del'> </span><span class='add'>u</span>p<span class='del'>e</span><span class='add'>p</span><span class='del'>r</span><span class='add'>o</span>s<span class='del'>o</span><span class='add'>e</span><span class='del'>n</span><span class='add'>d</span> t<span class='del'>h</span><span class='add'>o</span><span class='del'>a</span><span class='add'> </span><span class='del'>t</span><span class='add'>b</span><span class='del'> </span><span class='add'>e</span><span class='del'>t</span><span class='add'>.</span><span class='del'>h</span><span class='add'>.</span><span class='del'>i</span><span class='add'>.</span><span class='del'>s</span> <span class='del'>p</span><span class='add'>w</span><span class='del'>o</span><span class='add'>e</span><span class='del'>s</span><span class='add'> </span><span class='del'>s</span><span class='add'>a</span><span class='del'>i</span><span class='add'>l</span><span class='del'>b</span>l<span class='del'>e</span><span class='add'>w</span> e<span class='del'>n</span><span class='add'>r</span><span class='del'>d</span><span class='add'>e</span><span class='del'>o</span><span class='add'> </span><span class='del'>r</span>s<span class='del'>m</span><span class='add'>u</span><span class='del'>e</span><span class='add'>p</span><span class='del'>n</span><span class='add'>p</span><span class='del'>t</span><span class='del'> </span><span class='del'>w</span>o<span class='del'>u</span><span class='add'>s</span><span class='del'>l</span><span class='add'>e</span>d <span class='del'>b</span><span class='add'>t</span><span class='del'>r</span><span class='add'>o</span><span class='del'>i</span><span class='del'>n</span><span class='del'>g</span> <span class='del'>'</span><span class='add'>b</span><span class='del'>e</span><span class='del'>r</span> t<span class='add'>n</span>o the s<span class='del'>p</span><span class='add'>a</span><span class='del'>o</span><span class='add'>m</span><span class='add'> </span><span class='del'>t</span><span class='add'>e</span> light.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>T</span><span class='del'>e</span><span class='add'>h</span><span class='del'>v</span>e<span class='del'>r</span><span class='add'>y</span> <span class='del'>s</span><span class='add'>g</span>a<span class='add'>e</span><span class='del'>y</span><span class='add'>v</span> <span class='del'>t</span><span class='add'>u</span><span class='del'>o</span><span class='add'>s</span> a <span class='del'>f</span><span class='add'>g</span><span class='del'>a</span><span class='add'>r</span><span class='del'>m</span><span class='add'>e</span><span class='del'>o</span><span class='add'>a</span><span class='del'>u</span><span class='add'>t</span><span class='del'>s</span><span class='del'> </span><span class='del'>p</span><span class='del'>e</span>rs<span class='del'>o</span><span class='add'>u</span><span class='del'>n</span><span class='add'>i</span><span class='del'> </span>t<span class='del'>h</span><span class='add'>e</span><span class='del'>a</span><span class='del'>t</span> t<span class='del'>h</span><span class='add'>o</span><span class='del'>i</span><span class='del'>s</span> <span class='del'>p</span><span class='add'>b</span><span class='del'>o</span><span class='add'>e</span><span class='del'>s</span><span class='add'> </span><span class='del'>s</span><span class='add'>a</span><span class='del'>i</span>ble <span class='del'>e</span><span class='add'>t</span><span class='del'>n</span><span class='add'>o</span><span class='del'>d</span><span class='add'> </span><span class='del'>o</span>r<span class='del'>s</span><span class='del'>m</span>e<span class='del'>n</span><span class='add'>l</span><span class='del'>t</span><span class='add'>a</span><span class='del'> </span><span class='add'>x</span><span class='del'>w</span><span class='del'>o</span><span class='del'>u</span><span class='del'>l</span><span class='del'>d</span> b<span class='del'>r</span><span class='add'>e</span><span class='del'>i</span><span class='add'>f</span><span class='del'>n</span><span class='add'>o</span><span class='del'>g</span><span class='add'>r</span><span class='del'> </span><span class='del'>'</span><span class='del'>e</span>r<span class='del'> </span><span class='del'>t</span><span class='del'>o</span> the <span class='del'>s</span><span class='add'>b</span><span class='del'>p</span><span class='add'>i</span><span class='del'>o</span><span class='add'>g</span><span class='del'>t</span> <span class='del'>l</span><span class='add'>f</span>ight.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>H</span>e<span class='del'>v</span><span class='add'>'</span><span class='del'>e</span><span class='del'>r</span><span class='del'> </span><span class='del'>s</span><span class='del'>a</span>y <span class='del'>t</span><span class='add'>l</span><span class='del'>o</span><span class='add'>i</span><span class='del'> </span><span class='add'>k</span><span class='del'>a</span><span class='add'>e</span><span class='del'> </span><span class='add'>,</span><span class='del'>f</span><span class='del'>a</span><span class='del'>m</span><span class='del'>o</span><span class='del'>u</span><span class='del'>s</span> <span class='del'>p</span><span class='add'>\"</span><span class='del'>e</span><span class='del'>r</span><span class='del'>s</span><span class='del'>o</span><span class='del'>n</span><span class='del'> </span>th<span class='del'>a</span><span class='add'>,</span><span class='del'>t</span><span class='del'> </span><span class='del'>t</span><span class='del'>h</span>is possi<span class='del'>b</span><span class='add'>e</span><span class='del'>l</span><span class='add'>c</span>e <span class='del'>e</span><span class='add'>l</span><span class='del'>n</span><span class='add'>o</span><span class='del'>d</span>o<span class='del'>r</span><span class='add'>k</span><span class='del'>s</span><span class='del'>m</span><span class='del'>e</span><span class='del'>n</span>t <span class='del'>w</span><span class='add'>j</span><span class='del'>o</span>u<span class='del'>l</span><span class='add'>s</span><span class='del'>d</span><span class='add'>t</span> <span class='del'>b</span><span class='add'>l</span><span class='del'>r</span>i<span class='del'>n</span><span class='add'>k</span><span class='del'>g</span><span class='add'>e</span> <span class='del'>'</span><span class='add'>y</span><span class='add'>u</span><span class='del'>e</span><span class='add'>o</span>r <span class='del'>t</span><span class='add'>m</span><span class='del'>o</span> the<span class='add'>'</span><span class='del'> </span><span class='add'>r</span>s<span class='del'>p</span><span class='add'>.</span><span class='del'>o</span><span class='add'>\"</span><span class='del'>t</span> li<span class='del'>g</span><span class='add'>k</span><span class='del'>h</span><span class='add'>e</span><span class='add'>.</span><span class='del'>t</span><span class='add'>.</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='add'>A</span>N<span class='del'>e</span><span class='add'>d</span><span class='del'>v</span><span class='del'>e</span><span class='del'>r</span> <span class='del'>s</span><span class='add'>i</span><span class='del'>a</span><span class='add'>f</span><span class='del'>y</span> t<span class='del'>o</span><span class='add'>h</span><span class='del'> </span><span class='add'>i</span><span class='del'>a</span><span class='add'>s</span> <span class='del'>f</span><span class='add'>i</span><span class='del'>a</span><span class='del'>m</span><span class='del'>o</span><span class='del'>u</span><span class='del'>s</span> pe<span class='del'>r</span><span class='add'>v</span><span class='del'>s</span><span class='add'>e</span><span class='del'>o</span>n th<span class='del'>a</span><span class='add'>e</span><span class='del'>t</span> <span class='del'>t</span><span class='add'>r</span><span class='del'>h</span>i<span class='del'>s</span><span class='add'>g</span><span class='del'> </span><span class='add'>h</span><span class='del'>p</span><span class='add'>t</span><span class='del'>o</span><span class='add'> </span><span class='del'>s</span><span class='add'>t</span><span class='del'>s</span>i<span class='del'>b</span><span class='add'>m</span><span class='del'>l</span>e <span class='del'>e</span><span class='add'>f</span><span class='del'>n</span><span class='del'>d</span>or<span class='del'>s</span><span class='add'> </span>me<span class='del'>n</span><span class='add'> </span><span class='del'>t</span> <span class='del'>w</span><span class='del'>o</span><span class='del'>u</span><span class='del'>l</span>d <span class='del'>b</span><span class='add'>s</span><span class='del'>r</span><span class='add'>t</span><span class='del'>i</span><span class='add'>a</span><span class='del'>n</span><span class='del'>g</span><span class='del'> </span><span class='del'>'</span><span class='del'>e</span><span class='del'>r</span><span class='del'> </span>to <span class='del'>t</span><span class='add'>m</span><span class='del'>h</span><span class='add'>y</span><span class='del'>e</span> <span class='del'>s</span><span class='add'>o</span><span class='del'>p</span><span class='add'>w</span><span class='del'>o</span><span class='add'>n</span><span class='del'>t</span> li<span class='del'>g</span><span class='add'>n</span><span class='del'>h</span><span class='add'>e</span><span class='del'>t</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>W</span><span class='del'>e</span><span class='add'>h</span><span class='del'>v</span><span class='del'>e</span><span class='del'>r</span><span class='del'> </span><span class='del'>s</span>a<span class='del'>y</span><span class='add'>t</span> t<span class='del'>o</span><span class='add'>h</span><span class='del'> </span><span class='add'>e</span><span class='del'>a</span><span class='add'>y</span> <span class='del'>f</span><span class='add'>s</span>a<span class='del'>m</span><span class='add'>i</span><span class='del'>o</span><span class='add'>d</span><span class='del'>u</span><span class='del'>s</span> <span class='del'>p</span><span class='add'>w</span><span class='del'>e</span><span class='add'>a</span><span class='del'>r</span><span class='del'>s</span><span class='del'>o</span><span class='del'>n</span> that th<span class='del'>i</span><span class='add'>e</span><span class='del'>s</span><span class='add'>f</span> <span class='del'>p</span><span class='add'>w</span><span class='del'>o</span><span class='add'>a</span><span class='del'>s</span><span class='del'>s</span><span class='del'>i</span><span class='del'>b</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span><span class='del'>e</span><span class='del'>n</span><span class='del'>d</span><span class='del'>o</span>rsme<span class='del'>n</span><span class='add'>a</span><span class='del'>t</span><span class='add'>l</span><span class='del'> </span><span class='del'>w</span><span class='del'>o</span><span class='del'>u</span>l<span class='del'>d</span><span class='add'>y</span> <span class='del'>b</span><span class='add'>e</span><span class='add'>c</span><span class='del'>r</span><span class='add'>x</span>i<span class='del'>n</span><span class='add'>t</span><span class='add'>d</span><span class='del'>g</span><span class='add'>e</span> <span class='del'>'</span><span class='add'>a</span><span class='del'>e</span><span class='add'>b</span><span class='del'>r</span><span class='add'>o</span><span class='del'> </span><span class='add'>u</span><span class='del'>t</span>o<span class='del'> </span>the s<span class='add'>h</span><span class='add'>o</span>pot <span class='del'>l</span><span class='add'>s</span><span class='del'>i</span><span class='add'>h</span><span class='del'>g</span><span class='add'>o</span><span class='del'>h</span><span class='add'>o</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>N</span><span class='add'>T</span><span class='del'>e</span><span class='add'>h</span><span class='del'>v</span><span class='del'>e</span><span class='del'>r</span><span class='del'> </span><span class='del'>s</span><span class='del'>a</span><span class='del'>y</span><span class='del'> </span>to <span class='del'>a</span><span class='add'>w</span><span class='del'> </span><span class='del'>f</span><span class='del'>a</span><span class='del'>m</span><span class='del'>o</span><span class='del'>u</span><span class='del'>s</span><span class='del'> </span><span class='del'>p</span><span class='del'>e</span><span class='del'>r</span><span class='del'>s</span>on th<span class='del'>a</span><span class='add'>e</span><span class='del'>t</span> <span class='del'>t</span><span class='add'>w</span><span class='del'>h</span><span class='del'>i</span><span class='del'>s</span><span class='del'> </span><span class='del'>p</span><span class='del'>o</span><span class='del'>s</span><span class='del'>s</span>ible <span class='del'>e</span><span class='add'>i</span><span class='del'>n</span><span class='del'>d</span><span class='del'>o</span><span class='del'>r</span><span class='del'>s</span>me<span class='del'>n</span><span class='add'>a</span><span class='del'>t</span><span class='del'> </span>wo<span class='del'>u</span><span class='add'>f</span><span class='del'>l</span><span class='add'> </span>d<span class='del'> </span><span class='add'>o</span><span class='del'>b</span><span class='del'>r</span><span class='del'>i</span><span class='del'>n</span><span class='del'>g</span><span class='del'> </span><span class='del'>'</span><span class='del'>e</span><span class='del'>r</span> to the s<span class='del'>p</span><span class='add'>h</span>o<span class='del'>t</span><span class='add'>o</span><span class='del'> </span><span class='del'>l</span><span class='del'>i</span><span class='del'>g</span><span class='del'>h</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########################################################\n",
      "She just told me to get in the car and buckle my seatbelt.\n",
      "##########################################################\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>S<span class='del'>h</span><span class='add'>t</span><span class='del'>e</span><span class='add'>o</span><span class='del'> </span><span class='add'>p</span><span class='del'>j</span><span class='del'>u</span><span class='del'>s</span><span class='del'>t</span> <span class='del'>t</span><span class='add'>a</span><span class='del'>o</span><span class='add'>n</span><span class='del'>l</span>d <span class='del'>m</span><span class='add'>g</span><span class='del'>e</span><span class='del'> </span><span class='del'>t</span>o get in the car and <span class='del'>b</span><span class='add'>s</span><span class='del'>u</span><span class='add'>t</span><span class='del'>c</span><span class='add'>o</span><span class='del'>k</span><span class='add'>p</span><span class='add'>b</span><span class='del'>l</span><span class='add'> </span>e<span class='del'> </span><span class='add'>i</span><span class='del'>m</span><span class='add'>n</span><span class='del'>y</span><span class='add'>g</span> <span class='add'>u</span><span class='add'>d</span><span class='add'>e</span><span class='del'>s</span><span class='add'>r</span>ea<span class='add'>d</span><span class='add'> </span><span class='add'>a</span><span class='add'> </span><span class='del'>t</span><span class='add'>n</span>b<span class='del'>e</span><span class='add'>r</span><span class='del'>l</span><span class='add'>a</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span>he just <span class='del'>t</span><span class='add'>d</span><span class='del'>o</span><span class='add'>i</span><span class='del'>l</span>d <span class='del'>m</span><span class='add'>i</span><span class='del'>e</span><span class='add'>t</span> <span class='del'>t</span><span class='add'>f</span>o<span class='del'> </span><span class='add'>r</span><span class='del'>g</span><span class='del'>e</span><span class='del'>t</span><span class='del'> </span><span class='del'>i</span><span class='del'>n</span><span class='del'> </span>the car<span class='del'> </span><span class='add'>t</span><span class='del'>a</span><span class='add'>i</span><span class='del'>n</span><span class='del'>d</span><span class='del'> </span><span class='del'>b</span><span class='del'>u</span><span class='del'>c</span><span class='del'>k</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span><span class='del'>m</span><span class='del'>y</span><span class='del'> </span><span class='del'>s</span><span class='del'>e</span><span class='del'>a</span><span class='del'>t</span>belt.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span><span class='add'>I</span><span class='del'>h</span><span class='del'>e</span> just <span class='del'>t</span><span class='add'>h</span>o<span class='del'>l</span><span class='add'>p</span><span class='del'>d</span><span class='add'>e</span> <span class='del'>m</span><span class='add'>t</span><span class='del'>e</span><span class='add'>h</span><span class='del'> </span><span class='add'>a</span><span class='del'>t</span>o <span class='del'>g</span><span class='add'>I</span><span class='del'>e</span><span class='add'> </span><span class='del'>t</span><span class='add'>m</span><span class='del'> </span><span class='add'>a</span><span class='del'>i</span><span class='add'>d</span><span class='del'>n</span><span class='add'>e</span><span class='del'> </span>t<span class='del'>h</span>e car an<span class='del'>d</span><span class='add'>n</span> <span class='del'>b</span><span class='add'>p</span><span class='del'>u</span><span class='add'>r</span><span class='del'>c</span><span class='add'>o</span><span class='del'>k</span><span class='add'>u</span><span class='del'>l</span><span class='add'>d</span><span class='del'>e</span> <span class='del'>m</span><span class='add'>o</span><span class='del'>y</span><span class='add'>f</span> <span class='del'>s</span><span class='add'>m</span><span class='del'>e</span><span class='del'>a</span><span class='del'>t</span><span class='del'>b</span><span class='del'>e</span><span class='del'>l</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span><span class='add'>W</span>h<span class='del'>e</span><span class='add'>a</span><span class='del'> </span><span class='del'>j</span><span class='del'>u</span><span class='del'>s</span>t t<span class='del'>o</span><span class='add'>i</span><span class='del'>l</span><span class='del'>d</span><span class='del'> </span>me <span class='del'>t</span><span class='add'>d</span><span class='del'>o</span><span class='del'> </span>ge<span class='del'>t</span><span class='add'>s</span><span class='del'> </span><span class='del'>i</span><span class='del'>n</span> the <span class='del'>c</span><span class='add'>p</span><span class='del'>a</span><span class='add'>l</span><span class='del'>r</span><span class='del'> </span>an<span class='del'>d</span><span class='add'>e</span> <span class='del'>b</span><span class='add'>l</span><span class='del'>u</span><span class='add'>e</span><span class='del'>c</span><span class='add'>a</span><span class='del'>k</span><span class='add'>v</span><span class='del'>l</span>e <span class='del'>m</span><span class='add'>L</span><span class='del'>y</span><span class='add'>o</span><span class='del'> </span>s<span class='del'>e</span><span class='add'> </span>a<span class='del'>t</span><span class='add'>n</span><span class='del'>b</span><span class='add'>g</span>el<span class='add'>s</span><span class='del'>t</span><span class='add'>e</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span><span class='add'>D</span><span class='del'>h</span><span class='add'>o</span><span class='del'>e</span><span class='add'>n</span><span class='del'> </span><span class='add'>'</span><span class='del'>j</span><span class='del'>u</span><span class='del'>s</span>t <span class='del'>t</span><span class='add'>l</span>o<span class='del'>l</span><span class='add'>o</span><span class='del'>d</span><span class='add'>k</span> <span class='del'>m</span><span class='add'>a</span><span class='del'>e</span><span class='add'>t</span> t<span class='del'>o</span><span class='add'>h</span><span class='del'> </span><span class='del'>g</span>e<span class='del'>t</span><span class='add'>m</span> in the<span class='del'> </span><span class='add'>i</span><span class='del'>c</span><span class='del'>a</span>r <span class='del'>a</span><span class='add'>e</span><span class='del'>n</span><span class='add'>y</span><span class='del'>d</span><span class='add'>e</span> <span class='del'>b</span><span class='add'>i</span><span class='del'>u</span><span class='add'>f</span><span class='del'>c</span><span class='add'> </span><span class='del'>k</span><span class='add'>t</span><span class='del'>l</span><span class='add'>h</span><span class='del'>e</span><span class='del'> </span>my<span class='del'> </span><span class='add'>'</span><span class='del'>s</span><span class='add'>r</span>e<span class='del'>a</span><span class='add'> </span>t<span class='del'>b</span><span class='add'>h</span>e<span class='del'>l</span><span class='add'>r</span><span class='del'>t</span><span class='add'>e</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span><span class='add'>T</span>h<span class='add'>s</span><span class='del'>e</span><span class='add'>i</span> <span class='del'>j</span><span class='add'>l</span><span class='del'>u</span><span class='add'>i</span><span class='del'>s</span><span class='del'>t</span><span class='del'> </span>tol<span class='del'>d</span><span class='add'>e</span><span class='del'> </span><span class='del'>m</span>e <span class='del'>t</span>o<span class='del'> </span><span class='add'>n</span><span class='del'>g</span><span class='add'>k</span>e<span class='del'>t</span><span class='add'>y</span> <span class='del'>i</span><span class='add'>a</span><span class='del'>n</span><span class='add'>t</span> the <span class='add'>a</span><span class='del'>c</span><span class='add'>p</span>ar <span class='del'>a</span><span class='add'>i</span><span class='del'>n</span><span class='add'>s</span><span class='del'>d</span> <span class='del'>b</span><span class='add'>j</span>u<span class='del'>c</span><span class='add'>s</span><span class='del'>k</span><span class='add'>t</span><span class='del'>l</span><span class='del'>e</span> <span class='del'>m</span><span class='add'>a</span><span class='del'>y</span> <span class='del'>s</span><span class='add'>b</span><span class='del'>e</span>a<span class='del'>t</span><span class='add'>l</span><span class='del'>b</span><span class='del'>e</span>l<span class='del'>t</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span><span class='add'>I</span><span class='del'>h</span><span class='add'>t</span><span class='add'>s</span><span class='del'>e</span><span class='add'>'</span> just <span class='del'>t</span><span class='add'>g</span>o<span class='del'>l</span><span class='add'>n</span><span class='del'>d</span><span class='del'> </span><span class='del'>m</span>e <span class='del'>t</span><span class='add'>a</span><span class='del'>o</span> <span class='del'>g</span><span class='add'>l</span><span class='del'>e</span><span class='add'>i</span>t<span class='del'> </span><span class='add'>t</span><span class='del'>i</span><span class='add'>l</span><span class='del'>n</span><span class='add'>e</span> t<span class='del'>h</span><span class='add'>o</span><span class='del'>e</span><span class='add'>o</span> <span class='add'>a</span><span class='del'>c</span><span class='add'>f</span>ar and <span class='del'>b</span><span class='add'>I</span><span class='del'>u</span><span class='add'>'</span><span class='del'>c</span><span class='del'>k</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span><span class='del'>m</span>y <span class='del'>s</span><span class='add'>d</span><span class='del'>e</span><span class='add'>o</span><span class='del'>a</span><span class='add'>n</span><span class='del'>t</span><span class='del'>b</span><span class='del'>e</span><span class='del'>l</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>S</span><span class='add'>I</span><span class='del'>h</span><span class='add'>t</span><span class='del'>e</span><span class='add'>'</span><span class='del'> </span><span class='del'>j</span><span class='del'>u</span><span class='del'>s</span>t t<span class='del'>o</span><span class='add'>i</span><span class='del'>l</span><span class='del'>d</span><span class='del'> </span><span class='del'>m</span><span class='del'>e</span><span class='del'> </span><span class='del'>t</span><span class='del'>o</span><span class='del'> </span><span class='del'>g</span>et in the car <span class='del'>a</span><span class='add'>i</span><span class='del'>n</span><span class='del'>d</span><span class='del'> </span><span class='del'>b</span><span class='del'>u</span><span class='del'>c</span><span class='del'>k</span><span class='del'>l</span><span class='del'>e</span><span class='del'> </span><span class='del'>m</span>y s<span class='del'>e</span><span class='add'>h</span>a<span class='del'>t</span><span class='add'>p</span><span class='del'>b</span><span class='del'>e</span><span class='del'>l</span>t.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>She just <span class='del'>t</span><span class='add'>d</span>o<span class='del'>l</span><span class='add'>e</span><span class='del'>d</span><span class='add'>s</span><span class='del'> </span><span class='add'>n</span><span class='del'>m</span><span class='add'>'</span><span class='del'>e</span><span class='del'> </span><span class='del'>t</span>o <span class='del'>g</span><span class='add'>s</span>e<span class='add'>m</span><span class='del'>t</span><span class='add'>e</span> <span class='del'>i</span><span class='add'>t</span><span class='del'>n</span><span class='add'>o</span> <span class='del'>t</span><span class='add'>b</span><span class='del'>h</span>e <span class='del'>c</span><span class='add'>v</span><span class='add'>r</span><span class='del'>a</span><span class='add'>e</span>r <span class='del'>a</span><span class='add'>t</span><span class='del'>n</span><span class='add'>o</span><span class='del'>d</span><span class='del'> </span><span class='del'>b</span>u<span class='del'>c</span><span class='add'>g</span><span class='del'>k</span><span class='add'>h</span><span class='del'>l</span><span class='del'>e</span> <span class='del'>m</span><span class='add'>a</span><span class='del'>y</span><span class='add'>t</span><span class='del'> </span><span class='del'>s</span>ea<span class='del'>t</span><span class='add'>l</span><span class='del'>b</span><span class='del'>e</span>l<span class='del'>t</span>.</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>She<span class='del'> </span><span class='add'>'</span><span class='del'>j</span><span class='del'>u</span><span class='del'>s</span>t <span class='del'>t</span><span class='add'>g</span>o<span class='del'>l</span><span class='add'>n</span><span class='add'>a</span><span class='del'>d</span><span class='add'>n</span> <span class='del'>m</span><span class='add'>g</span><span class='del'>e</span><span class='del'> </span>to <span class='del'>g</span><span class='add'>o</span><span class='del'>e</span><span class='add'>u</span>t <span class='del'>i</span><span class='add'>t</span><span class='del'>n</span><span class='add'>h</span><span class='del'> </span><span class='add'>e</span><span class='del'>t</span><span class='add'>r</span><span class='del'>h</span>e <span class='del'>c</span>a<span class='add'>d</span><span class='add'> </span><span class='del'>r</span><span class='add'>n</span> a<span class='del'>n</span><span class='add'>v</span><span class='del'>d</span><span class='add'>e</span> <span class='del'>b</span><span class='add'>t</span><span class='del'>u</span><span class='add'>h</span><span class='del'>c</span><span class='add'>e</span><span class='del'>k</span><span class='add'> </span><span class='del'>l</span>e m<span class='del'>y</span><span class='add'>e</span> <span class='add'>r</span><span class='del'>s</span><span class='add'>t</span>eat<span class='del'>b</span><span class='add'>m</span>e<span class='del'>l</span><span class='add'>n</span>t<span class='del'>.</span><span class='add'>?</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "######################################\n",
      "I'm going to Maryland, did I tell you?\n",
      "######################################\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='del'>I</span><span class='del'>'</span><span class='del'>m</span><span class='del'> </span><span class='del'>g</span><span class='del'>o</span>ing to Marylan<span class='del'>d</span><span class='add'>e</span><span class='del'>,</span><span class='add'>e</span><span class='del'> </span><span class='del'>d</span><span class='del'>i</span><span class='del'>d</span> I t<span class='del'>e</span><span class='add'>.</span><span class='del'>l</span><span class='del'>l</span><span class='del'> </span><span class='del'>y</span><span class='del'>o</span><span class='del'>u</span><span class='del'>?</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I'm going to <span class='del'>M</span><span class='add'>g</span><span class='del'>a</span><span class='add'>o</span><span class='del'>r</span><span class='add'> </span><span class='del'>y</span><span class='add'>t</span><span class='del'>l</span><span class='add'>o</span><span class='del'>a</span><span class='del'>n</span><span class='del'>d</span><span class='del'>,</span> <span class='del'>d</span><span class='add'>j</span><span class='del'>i</span><span class='add'>a</span><span class='del'>d</span><span class='del'> </span><span class='del'>I</span> <span class='del'>t</span><span class='del'>e</span>l<span class='del'>l</span><span class='add'>.</span><span class='del'> </span><span class='del'>y</span><span class='del'>o</span><span class='del'>u</span><span class='del'>?</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='add'>e</span><span class='del'>I</span><span class='add'>W</span>'<span class='add'>e</span><span class='del'>m</span><span class='add'>r</span> going to <span class='del'>M</span><span class='add'>d</span><span class='del'>a</span><span class='add'>i</span><span class='del'>r</span><span class='add'>n</span><span class='del'>y</span><span class='del'>l</span><span class='del'>a</span>n<span class='del'>d</span><span class='add'>e</span><span class='del'>,</span><span class='add'>r</span> <span class='del'>d</span><span class='add'>w</span>i<span class='del'>d</span><span class='add'>t</span><span class='del'> </span><span class='add'>h</span><span class='del'>I</span> <span class='del'>t</span><span class='add'>K</span><span class='del'>e</span><span class='add'>h</span><span class='del'>l</span><span class='del'>l</span><span class='del'> </span>yo<span class='del'>u</span><span class='add'>e</span><span class='del'>?</span><span class='add'>.</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I'm go<span class='del'>i</span><span class='add'>n</span>n<span class='del'>g</span><span class='add'>a</span> <span class='del'>t</span><span class='add'>g</span>o <span class='del'>M</span><span class='add'>g</span><span class='del'>a</span><span class='add'>e</span><span class='add'> </span><span class='add'>m</span><span class='del'>r</span><span class='add'>t</span>y<span class='add'>h</span><span class='del'>l</span><span class='add'> </span>a<span class='del'>n</span><span class='add'>i</span><span class='del'>d</span><span class='add'>r</span><span class='del'>,</span> <span class='del'>d</span><span class='add'>a</span><span class='del'>i</span><span class='add'>n</span>d <span class='del'>I</span><span class='add'>m</span><span class='del'> </span><span class='add'>a</span><span class='del'>t</span><span class='add'>k</span>e<span class='del'>l</span><span class='add'>u</span><span class='del'>l</span><span class='add'>p</span> <span class='del'>y</span><span class='add'>d</span>o<span class='del'>u</span><span class='add'>n</span><span class='add'>.</span><span class='del'>?</span><span class='add'>e</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I'm <span class='del'>g</span><span class='add'>h</span><span class='del'>o</span><span class='add'>e</span><span class='del'>i</span><span class='add'>r</span><span class='del'>n</span><span class='add'>e</span><span class='del'>g</span> <span class='add'>o</span><span class='del'>t</span><span class='add'>f</span>o <span class='del'>M</span><span class='add'>w</span><span class='del'>a</span><span class='add'>o</span>r<span class='del'>y</span><span class='add'>k</span><span class='add'> </span><span class='del'>l</span><span class='add'>,</span>a<span class='del'>n</span>d, <span class='add'>h</span><span class='del'>d</span><span class='add'>t</span>i<span class='add'> </span><span class='del'>d</span><span class='add'>s</span> I <span class='del'>t</span><span class='add'>s</span>e<span class='del'>l</span><span class='add'>r</span><span class='del'>l</span><span class='add'>i</span><span class='del'> </span><span class='del'>y</span>ou<span class='add'>.</span><span class='del'>?</span><span class='add'>s</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I'm <span class='del'>g</span><span class='add'>d</span><span class='del'>o</span>i<span class='del'>n</span><span class='add'>s</span><span class='del'>g</span><span class='add'>a</span><span class='del'> </span><span class='add'>p</span><span class='del'>t</span><span class='add'>p</span>o<span class='del'> </span><span class='add'>i</span><span class='del'>M</span><span class='del'>a</span><span class='del'>r</span><span class='del'>y</span><span class='del'>l</span><span class='del'>a</span>n<span class='del'>d</span><span class='add'>t</span><span class='del'>,</span><span class='add'>e</span><span class='del'> </span><span class='del'>d</span><span class='del'>i</span>d I<span class='del'> </span><span class='add'>n</span><span class='del'>t</span><span class='del'>e</span><span class='del'>l</span><span class='del'>l</span> you<span class='del'>?</span><span class='add'>.</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I<span class='del'>'</span><span class='add'>s</span><span class='del'>m</span> <span class='del'>g</span><span class='add'>t</span><span class='del'>o</span><span class='add'>h</span><span class='del'>i</span><span class='add'>a</span><span class='del'>n</span><span class='del'>g</span><span class='del'> </span><span class='del'>t</span>o <span class='del'>M</span><span class='add'>w</span><span class='del'>a</span><span class='add'>h</span><span class='del'>r</span><span class='del'>y</span><span class='del'>l</span>a<span class='del'>n</span><span class='add'>t</span><span class='del'>d</span><span class='del'>,</span> <span class='del'>d</span><span class='add'>t</span><span class='del'>i</span><span class='add'>h</span><span class='del'>d</span><span class='add'>e</span><span class='del'> </span><span class='add'>y</span><span class='del'>I</span> t<span class='del'>e</span><span class='add'>o</span>l<span class='del'>l</span><span class='add'>d</span> you?</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'><span class='add'>S</span><span class='add'>o</span><span class='add'> </span>I<span class='del'>'</span>m<span class='del'> </span>g<span class='del'>o</span>i<span class='del'>n</span>g to Maryl<span class='del'>a</span><span class='add'>e</span><span class='del'>n</span><span class='add'>t</span><span class='del'>d</span><span class='del'>,</span> <span class='del'>d</span><span class='add'>h</span>i<span class='del'>d</span><span class='add'>m</span> <span class='del'>I</span><span class='add'>t</span><span class='del'> </span><span class='add'>h</span><span class='del'>t</span><span class='add'>i</span><span class='del'>e</span><span class='add'>n</span><span class='del'>l</span><span class='add'>k</span><span class='del'>l</span> <span class='del'>y</span><span class='add'>t</span><span class='del'>o</span><span class='add'>h</span><span class='del'>u</span><span class='add'>a</span><span class='add'>.</span><span class='del'>?</span><span class='add'>t</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I'm going to <span class='del'>M</span><span class='add'>b</span><span class='del'>a</span><span class='add'>e</span><span class='del'>r</span><span class='add'>,</span><span class='del'>y</span><span class='add'> </span>l<span class='del'>a</span><span class='add'>i</span><span class='del'>n</span><span class='add'>k</span><span class='del'>d</span><span class='add'>e</span>, <span class='del'>d</span><span class='add'>y</span><span class='del'>i</span><span class='add'>o</span><span class='add'>,</span><span class='del'>d</span><span class='add'>u</span> <span class='add'>o</span><span class='add'>u</span><span class='del'>I</span><span class='add'>y</span> <span class='del'>t</span><span class='add'>u</span><span class='del'>e</span><span class='add'>g</span>l<span class='del'>l</span><span class='add'>y</span> <span class='del'>y</span><span class='add'>m</span>o<span class='del'>u</span><span class='add'>n</span><span class='add'>t</span><span class='add'>e</span><span class='add'>r</span><span class='add'>.</span><span class='del'>?</span><span class='add'>s</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div class='edit'>I'm <span class='add'>o</span><span class='add'>o</span><span class='del'>g</span><span class='add'>l</span>oing <span class='del'>t</span><span class='add'>f</span>o<span class='del'> </span><span class='add'>r</span><span class='del'>M</span><span class='add'>w</span><span class='del'>a</span><span class='del'>r</span>y<span class='del'>l</span>a<span class='del'>n</span><span class='del'>d</span>, <span class='del'>d</span><span class='add'>t</span><span class='del'>i</span><span class='add'>o</span><span class='del'>d</span><span class='del'> </span><span class='del'>I</span> t<span class='del'>e</span><span class='add'>h</span><span class='del'>l</span><span class='add'>i</span><span class='del'>l</span><span class='add'>s</span><span class='del'> </span><span class='add'>.</span><span class='del'>y</span><span class='del'>o</span><span class='del'>u</span><span class='del'>?</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for query in queries:\n",
    "    print(\"#\" * len(query))\n",
    "    print(query)\n",
    "    print(\"#\" * len(query))\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    scores = edit_distance_search(query, flat_msgs)\n",
    "    for mess in scores[:10]:\n",
    "        message = mess[1]['text']\n",
    "        edits= get_editops(query, message)\n",
    "        display(HTML(print_edits(query, message, edits)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "85493a5c2399e2ba62934235a3817de0",
     "grade": false,
     "grade_id": "cell-65e43d6351ef9c63",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Question 4b: Visualizing Edit Distance (Free Response)\n",
    "What do you observe from the visualized edits above? \n",
    "\n",
    "Would you want to use this method in a search engine? Why or why not?\n",
    "\n",
    "Include a short discussion of what seems to work well and what doesn't seem to work well and why this might be."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3af23603ab322cf298423a498d2fe98d",
     "grade": true,
     "grade_id": "cell-782122880d3c4ef1",
     "locked": false,
     "points": 5,
     "schema_version": 3,
     "solution": true
    }
   },
   "source": [
    "YOUR ANSWER HERE\n",
    "\n",
    "1. In most of the cases, the original sentence(query) is deleted or inserted in most of the cases, while only a few of the characters are left, this means that there are too much changes to do in order to translate one sentence into another.\n",
    "\n",
    "2. just like what i said in last problem, This might not have worked, since the query here is a sentence with a lot of words and spaces, if we used this method, we may ignore the sequence of the words in a sentence. For example, if a sentence_A is \"Kardshina is a beauty\", sentence_B is \"beauty is Kardshina\", and sentence_C is \"Kardshian is a bread\", in this way, sentence_A and sentence_c edit distance =6 will be lower than sentence_A and sentence_B=17, however, in fact sentence_A and B are more closer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "686df4a9ffcbde767d6428b5cc764711",
     "grade": false,
     "grade_id": "cell-81c2941ca723a8c2",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Question 5a: Changing the costs (Code Completion)\n",
    "\n",
    "Thus far all our code has been using standard costs. Sometimes we might want to alter the edit-distance penalty depending on the type of change we are making. In practice, the use of a simple uniform cost for all changes is suboptimal, since certain changes are more likely to happen than others. For instance, it is easier to mix up characters that are adjacent to each other on the keyboard (typos), and we'd like you to **reduce the cost of such substitutions of adjacent keyboard letters to 1.75 instead of 2**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "be5bdeda6113ef24dbc910a3b93115aa",
     "grade": false,
     "grade_id": "cell-2c6aebf209c22779",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# we provide you with a list of adjacent characters\n",
    "adj_chars = [('a', 'q'), ('a', 's'), ('a', 'z'), ('b', 'g'), ('b', 'm'), ('b', 'n'), ('b', 'v'), ('c', 'd'),\n",
    "             ('c', 'v'), ('c', 'x'), ('d', 'c'), ('d', 'e'), ('d', 'f'), ('d', 's'), ('e', 'd'), ('e', 'r'),\n",
    "             ('e', 'w'), ('f', 'd'), ('f', 'g'), ('f', 'r'), ('f', 'v'), ('g', 'b'), ('g', 'f'), ('g', 'h'),\n",
    "             ('g', 't'), ('h', 'g'), ('h', 'j'), ('h', 'm'), ('h', 'n'), ('h', 'y'), ('i', 'k'), ('i', 'o'),\n",
    "             ('i', 'u'), ('j', 'h'), ('j', 'k'), ('j', 'u'), ('k', 'i'), ('k', 'j'), ('k', 'l'), ('l', 'k'),\n",
    "             ('l', 'o'), ('m', 'b'), ('m', 'h'), ('n', 'b'), ('n', 'h'), ('o', 'i'), ('o', 'l'), ('o', 'p'),\n",
    "             ('p', 'o'), ('q', 'a'), ('q', 'w'), ('r', 'e'), ('r', 'f'), ('r', 't'), ('s', 'a'), ('s', 'd'),\n",
    "             ('s', 'w'), ('s', 'x'), ('t', 'g'), ('t', 'r'), ('t', 'y'), ('u', 'i'), ('u', 'j'), ('u', 'y'), \n",
    "             ('v', 'b'), ('v', 'c'), ('v', 'f'), ('w', 'e'), ('w', 'q'), ('w', 's'), ('x', 'c'), ('x', 's'), \n",
    "             ('x', 'z'), ('y', 'h'), ('y', 't'), ('y', 'u'), ('z', 'a'), ('z', 'x')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "65b8b05d04f936670c886a3235cace3e",
     "grade": false,
     "grade_id": "cell-2d10c2eafbe967d0",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def substitution_cost_adj(query, message, i, j):\n",
    "    \"\"\"\n",
    "    Custom substitution cost:\n",
    "    The cost is 1.75 when substituting a pair of characters that can be found in adj_chars\n",
    "    Otherwise, the cost is 2. (Not 1 as it was before!)\n",
    "    \"\"\"\n",
    "    # YOUR CODE HERE\n",
    "    if query[i-1] == message[j-1]:\n",
    "        return 0\n",
    "    elif (query[i-1],message[j-1]) in adj_chars:\n",
    "        return 1.75\n",
    "    else:\n",
    "        return 2\n",
    "    \n",
    "curr_substitution_function = substitution_cost_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cfe719c60ebdca2e6cdfea9f4891d604",
     "grade": true,
     "grade_id": "cell-305924041b7ac97d",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "assert edit_distance(\"Levenshtein\",\"Levenstein\") == 1\n",
    "assert edit_distance(\"Levenshtein\",\"Lebenshtein\") == 1.75"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b2b5578fa9026578a74ab8ee97a94243",
     "grade": false,
     "grade_id": "cell-24c40fdfb35f0f56",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Run the following code below to reorder the top ten closest matches for each query using our new custom edit-distance discounts.\n",
    "\n",
    "Note: It is ok to obtain duplicate results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "faceb2c8fd43892622b5bb130998c345",
     "grade": false,
     "grade_id": "cell-64c9bb8ac0341a9b",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#################################################################\n",
      "It's like a bunch of people running around talking about nothing.\n",
      "#################################################################\n",
      "[0.00] BRUCE: It's like a bunch of people running around talking about nothing.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[49.25] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[50.25] BRUCE: I'm looking forward to this.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[50.75] JONATHAN: I've literally been reading about...\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[52.50] KOURTNEY: I'm not going to go tell him anything.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[53.50] SIMON: I'll literally, at this point, take anything.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[53.50] KIM: I'm going to be riding around in my new Bentley.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[54.25] SHIEH: It's a complete approach to skin rejuvenation.\n",
      "\t(Keeping Up With the Kardashians - Leaving the Nest)\n",
      "[54.25] KRIS: I'm disappointed in you.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[55.25] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "\n",
      "#############################################################################################\n",
      "Never say to a famous person that this possible endorsment would bring 'er to the spot light.\n",
      "#############################################################################################\n",
      "[58.50] SIMON: You don't tell an international celebrity that this possible endorsement could bring her back into the spotlight.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[73.25] BRUCE: That was the whole idea of doing the shoot.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[75.75] BRUCE: She just doesn't seem to be very tough at all.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[77.50] KHLOE: Trust me, this is the most entertaining part of the entire night.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[77.75] ALEX: I feel like people want to see you, like, back in the spotlight.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[79.25] KIM: I just hope that I made Carol Ann proud of me.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[81.00] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[81.00] KHLOE: She's probably posing, and going like this.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[81.25] BRANDON: Is that what they told you?\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[81.50] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "\n",
      "##########################################################\n",
      "She just told me to get in the car and buckle my seatbelt.\n",
      "##########################################################\n",
      "[41.00] KRIS: He just did it for the articles.\n",
      "\t(Keeping Up With the Kardashians - Brody in the House)\n",
      "[41.50] BRUCE: It's time to get her in shape.\n",
      "\t(Keeping Up With the Kardashians - Brody in the House)\n",
      "[45.00] KIM: Stop and go get in the car and stop being rude and a brat.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[47.00] KIM: I just hope that I made Carol Ann proud of me.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[47.25] BRUCE: She just doesn't seem to be very tough at all.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[49.75] KRIS: What time does the plane leave Los Angeles.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[50.25] KIM: So I'm going to let him think that.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[50.50] KRIS: It's just gone a little too far, and I'm done.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[50.75] KRIS: She's gonna get out there and have the same treatment?\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[51.25] KIM: I'm gonna go get my hair and makeup done.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "\n",
      "######################################\n",
      "I'm going to Maryland, did I tell you?\n",
      "######################################\n",
      "[22.50] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "[27.50] KHLOE: I'm going to go to jail.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[31.75] KRIS: I'm disappointed in you.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[32.50] KIM: So I'm going to let him think that.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[33.25] BRUCE: I'm looking forward to this.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[34.50] KOURTNEY: We're going to dinner with Khloe.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[35.50] KOURTNEY: I'm not going to go tell him anything.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[35.50] BRANDON: Is that what they told you?\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[36.00] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[36.75] KIM: I'm gonna go get my hair and makeup done.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for query in queries:\n",
    "    print(\"#\" * len(query))\n",
    "    print(query)\n",
    "    print(\"#\" * len(query))\n",
    "\n",
    "    # we compare the query with top_10 to save time because\n",
    "    # we already know that top_10 will be close to the query\n",
    "    # so there is no need to check all flat_msgs\n",
    "    for score, msg in edit_distance_search(query, top_10)[:10]:\n",
    "        print(\"[{:.2f}] {}: {}\\n\\t({})\".format(\n",
    "            score,\n",
    "            msg['speaker'],\n",
    "            msg['text'],\n",
    "            msg['episode_title']))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "78bc512d8967fe1d4a47b70418944c66",
     "grade": false,
     "grade_id": "cell-9ec8f7c2125384ac",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Question 5b: Changing the costs (Free Response)\n",
    "\n",
    "How do these results compare to that of default `edit_distance` metric?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "d0816b19d60152fa046ff2c2baea27b9",
     "grade": true,
     "grade_id": "cell-390fc5ab03bed0dc",
     "locked": false,
     "points": 5,
     "schema_version": 3,
     "solution": true
    }
   },
   "source": [
    "YOUR ANSWER HERE\n",
    "\n",
    "1. In algorithm, this one cost more in substituting the characters, while the default one the insertion, deletion and substitution cost the same.\n",
    "\n",
    "SO, in this case, the top 10 are composed of the sentences with more insertion and deletion, for example, a lot of short sentences are chosen into the top 10 cloest sentences."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5c30e060392787ff2b0cf1c362db9817",
     "grade": false,
     "grade_id": "cell-085944c07c567aba",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Question 5c: Changing the costs (Code Completition)\n",
    "\n",
    "We'd now like you to modify your `custom_edit_distance` costs once more such that substitutions for adjacent keyboard letters are still 1.75, but substitutions for non-adjacent keyboard letters are penalized with a much higher cost of 4.\n",
    "\n",
    "Complete the code stub below and run the cells below to recompute our queries once more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "06d481b19407741844046ea0214f1425",
     "grade": false,
     "grade_id": "cell-f36ee0b643ec61f7",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def substitution_cost_non_adj(query, message, i, j):\n",
    "    \"\"\"\n",
    "    Q4c - Custom substitution cost (part 2):\n",
    "    The cost is 1.75 when substituting a pair of characters that can be found in adj_chars\n",
    "    Otherwise, the cost is *** 4 ***. (Not 1 as it was before!)\n",
    "    \"\"\"\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    if query[i-1] == message[j-1]:\n",
    "        return 0\n",
    "    elif (query[i-1],message[j-1]) in adj_chars:\n",
    "        return 4\n",
    "    else:\n",
    "        return 2\n",
    "    \n",
    "curr_substitution_function = substitution_cost_non_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4cf50c1e93fda67650f2fedfc3df6829",
     "grade": false,
     "grade_id": "cell-67ac893279614ac1",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#################################################################\n",
      "It's like a bunch of people running around talking about nothing.\n",
      "#################################################################\n",
      "[0.00] BRUCE: It's like a bunch of people running around talking about nothing.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[50.00] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[51.00] JONATHAN: I've literally been reading about...\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[51.00] BRUCE: I'm looking forward to this.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[53.00] KOURTNEY: I'm not going to go tell him anything.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[54.00] SIMON: I'll literally, at this point, take anything.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[55.00] SHIEH: It's a complete approach to skin rejuvenation.\n",
      "\t(Keeping Up With the Kardashians - Leaving the Nest)\n",
      "[55.00] KIM: I'm going to be riding around in my new Bentley.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[55.00] KRIS: I'm disappointed in you.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[56.00] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "\n",
      "#############################################################################################\n",
      "Never say to a famous person that this possible endorsment would bring 'er to the spot light.\n",
      "#############################################################################################\n",
      "[60.00] SIMON: You don't tell an international celebrity that this possible endorsement could bring her back into the spotlight.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[74.00] BRUCE: That was the whole idea of doing the shoot.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[77.00] BRUCE: She just doesn't seem to be very tough at all.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[78.00] KHLOE: Trust me, this is the most entertaining part of the entire night.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[79.00] ALEX: I feel like people want to see you, like, back in the spotlight.\n",
      "\t(Keeping Up With the Kardashians - Delivering Baby Mason)\n",
      "[81.00] KIM: I just hope that I made Carol Ann proud of me.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[82.00] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[82.00] KHLOE: She's probably posing, and going like this.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[82.00] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "[82.00] BRANDON: Is that what they told you?\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "\n",
      "##########################################################\n",
      "She just told me to get in the car and buckle my seatbelt.\n",
      "##########################################################\n",
      "[42.00] KRIS: He just did it for the articles.\n",
      "\t(Keeping Up With the Kardashians - Brody in the House)\n",
      "[42.00] BRUCE: It's time to get her in shape.\n",
      "\t(Keeping Up With the Kardashians - Brody in the House)\n",
      "[46.00] KIM: Stop and go get in the car and stop being rude and a brat.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[48.00] KIM: I just hope that I made Carol Ann proud of me.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[48.00] BRUCE: She just doesn't seem to be very tough at all.\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[51.00] KRIS: What time does the plane leave Los Angeles.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[51.00] KIM: So I'm going to let him think that.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[52.00] KRIS: It's just gone a little too far, and I'm done.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[52.00] KRIS: She's gonna get out there and have the same treatment?\n",
      "\t(Keeping Up With the Kardashians - Body Blows)\n",
      "[53.00] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "\n",
      "######################################\n",
      "I'm going to Maryland, did I tell you?\n",
      "######################################\n",
      "[23.00] LAMAR: I'm going to need it.\n",
      "\t(Keeping Up With the Kardashians - I Want Your Sex)\n",
      "[28.00] KHLOE: I'm going to go to jail.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[32.00] KRIS: I'm disappointed in you.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[33.00] KIM: So I'm going to let him think that.\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "[34.00] BRUCE: I'm looking forward to this.\n",
      "\t(Keeping Up With the Kardashians - Kourt's First Cover)\n",
      "[35.00] KOURTNEY: We're going to dinner with Khloe.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[36.00] KOURTNEY: I'm not going to go tell him anything.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[37.00] KHLOE: I'm not going and you're not going.\n",
      "\t(Keeping Up With the Kardashians - Kim Becomes a Diva)\n",
      "[37.00] KIM: I'm gonna go get my hair and makeup done.\n",
      "\t(Keeping Up With the Kardashians - Blame It on the Alcohol)\n",
      "[37.00] BRANDON: Is that what they told you?\n",
      "\t(Keeping Up With the Kardashians - Birthday Suit)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for query in queries:\n",
    "    print(\"#\" * len(query))\n",
    "    print(query)\n",
    "    print(\"#\" * len(query))\n",
    "\n",
    "    for score, msg in edit_distance_search(query, top_10)[:10]:\n",
    "        print(\"[{:.2f}] {}: {}\\n\\t({})\".format(\n",
    "            score,\n",
    "            msg['speaker'],\n",
    "            msg['text'],\n",
    "            msg['episode_title']))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "c3b71ea45162befdb10976f6de765037",
     "grade": false,
     "grade_id": "cell-c23d6650974f1fdd",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "### Question 5d: Changing the costs (Free Response)\n",
    "What do you notice about the results of this search as compared that of our first `custom_edit_distance` and why do we see this?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "eb797f2570fd679cd95df667a79a3943",
     "grade": true,
     "grade_id": "cell-4970e93717625803",
     "locked": false,
     "points": 10,
     "schema_version": 3,
     "solution": true
    }
   },
   "source": [
    "YOUR ANSWER HERE\n",
    "\n",
    "Compare to other lower substitution cost, this way the substitution cost is high especially of this closet chars. In most of the cases, this kind of close char substitution is not rank as the top 10 cloest anymore. Instead some short sentences are chosen as the top 10.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
